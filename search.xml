<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[原码反码补码的相互转换]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F10%2F07%2Fcomputer2%2F</url>
    <content type="text"><![CDATA[首先，正数 的原码，反码，补码都是 相同的。所以，这里讨论负数的原码，反码，补码的相互转化问题。 一、负数原码和反码的相互转化负数原码转化为反码：符号位不变，数值位按位取反。 原码 1100 0010反码 1011 1101 负数反码转化为原码：符号位不变，数值位按位取反。 反码 1011 1101原码 1100 0010 二、负数原码和补码的相互转化负数原码转化为补码：符号位不变，数值位按位取反，末尾加一。 原码 1100 0010反码 1011 1101 //符号位不变，数值位按位取反补码 1011 1110 //末尾加1 负数补码转化为原码：符号位不变，数值位按位取反，末尾加1。 补码 1011 11101100 0001 //符号位不变，数值位按位取反原码 1100 0010 //末尾加1 三、负数反码和补码的相互转化负数反码转化为补码：末尾加1。 反码 1011 1101补码 1011 1110 负数补码转化为反码：末尾减1（注意，此处的反码是指原码的反码）。 补码 1011 1110原码的反码 1011 1101 //减法 借位 四、总结 正数的原码、反码和补码都相同。 负数原码和反码的相互转换：符号位不变，数值位按位取反。 负数原码和补码的相互转换：符号位不变，数值位按位取反，末位再加1。]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二进制十进制的互换]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F10%2F07%2Fcomputer%2F</url>
    <content type="text"><![CDATA[转成二进制主要有以下几种：正整数转二进制，负整数转二进制，小数转二进制； 1、正整数转成二进制： 要点一定一定要记住哈：除二取余，然后倒序排列，高位补零。 也就是说，将正的十进制数除以二，得到的商再除以二，依次类推知道商为零或一时为止，然后在旁边标出各步的余数，最后倒着写出来，高位补零就OK咧。哎呀，还是举例说明吧，比如42转换为二进制，如图1所示操作。 42除以2得到的余数分别为010101，然后咱们倒着排一下，42所对应二进制就是101010。如图2所示更直观的表达。 计算机内部表示数的字节单位是定长的，如8位，16位，或32位。所以，位数不够时，高位补零，所说，如图3所示，42转换成二进制以后就是。00101010，也即规范的写法为（42）10=（00101010）。 2、负整数转换成二进制： 方法：先是将对应的正整数转换成二进制后，对二进制取反，然后对结果再加一。还以42为例，负整数就是-42，如图4所示为方法解释。最后即为：（-42）10=（11010110）。 3、小数转换为二进制的方法： 对小数点以后的数乘以2，有一个结果吧，取结果的整数部分（不是1就是0喽），然后再用小数部分再乘以2，再取结果的整数部分……以此类推，直到小数部分为0或者位数已经够了就OK了。然后把取的整数部分按先后次序排列就OK了，就构成了二进制小数部分的序列，举个例子吧，比如0.125，如图5所示。 如果小数的整数部分有大于0的整数时该如何转换呢？如以上整数转换成二进制，小数转换成二进制，然后加在一起就OK了，如图6所示。 4、整数二进制转换为十进制： 首先将二进制数补齐位数，首位如果是0就代表是正整数，如果首位是1则代表是负整数。 先看首位是0的正整数，补齐位数以后，将二进制中的位数分别将下边对应的值相乘，然后相加得到的就为十进制，比如1010转换为十进制，方法如图7所示。 5、若二进制补足位数后首位为1时，就需要先取反再换算： 例如，11101011，首位为1，那么就先取反吧：-00010100，然后算一下10100对应的十进制为20，所以对应的十进制为-20，方法如图8所示。 6、将有小数的二进制转换为十进制时： 例如0.1101转换为十进制的方法：将二进制中的四位数分别于下边（如图9所示）对应的值相乘后相加得到的值即为换算后的十进制。 进制之间的转换虽然繁琐，但理解后也不难，但是需要经常温习，然后才不会弄混淆。]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归算法与汉诺塔问题]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F10%2F07%2Fhanoi%2F</url>
    <content type="text"><![CDATA[一、递归理解 大师 L. Peter Deutsch 说过：To Iterate is Human, to Recurse, Divine.（人理解迭代，神理解递归。） 1、递归定义：&emsp;&emsp;在数学与计算机科学中，递归（Recursion）是指将重复将问题分解为同类的子问题而解决问题的方法，也可以说是在函数的定义中使用函数自身的方法，其核心思想是 分治策略，分而治之。实际上，递归，顾名思义，其包含了两个意思：递 和 归，这也正是递归思想的精华所在。 2、递归条件：&emsp;&emsp;① 递归函数&emsp;&emsp;② 递归出口 举个简单例子如下： 12345678910111213141516/*** 假设有个数列 1 3 5 7 9 11 ....* *递归函数：f(n) = f(n-1)+2;*递归出口: f(1) = 1;* *@param n 求n项的值*@return 返回第n项的值*/int find (int n) &#123; if (n == 1) &#123; // 递归出口 return 1; &#125; else &#123; // 递归函数 return find(n-1)+2; &#125;&#125; 再举个例子，但由于它没有结（di）束（gui）条（chu）件（kou），进入死循环状态，所以是不正确的： 1234int recursion()&#123; recursion();&#125; 3、简单理解：&emsp;&emsp;递归：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开它。若干次之后，你打开面前的门后，发现只有一间屋子，没有门了。然后，你开始原路返回，每走回一间屋子，你数一次，走到入口的时候，你可以回答出你到底用这你把钥匙打开了几扇门。 &emsp;&emsp;循环：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门（若前面两扇门都一样，那么这扇门和前两扇门也一样；如果第二扇门比第一扇门小，那么这扇门也比第二扇门小，你继续打开这扇门，一直这样继续下去直到打开所有的门。但是，入口处的人始终等不到你回去告诉他答案。 4、深入理解&emsp;&emsp;正如上面所描述的场景，那么递归就是有去（递去）有回（归来），归去来兮…… 如下图所示。 &emsp;&emsp;“有去” 是指：递归问题必须可以分解为若干个规模较小，与原问题形式相同的子问题，这些子问题可以用相同的解题思路来解决，就像上面例子中的钥匙可以打开后面所有门上的锁一样。 &emsp;&emsp;“有回” 是指 : 这些问题的演化过程是一个从大到小，由近及远的过程，并且会有一个明确的终点(临界点)，一旦到达了这个临界点，就不用再往更小、更远的地方走下去。最后，从这个临界点开始，原路返回到原点，原问题解决。 归去来兮 函数递归 &emsp;&emsp;此时 我们应该可以理解到 分治策略 的含义了。特别地，在函数实现时，因为解决大问题的方法和解决小问题的方法往往是同一个方法，所以就产生了函数调用它自身的情况，这也正是递归的定义所在。在此再强调一下递归所需的条件，解决问题的函数必须有明确的结束条件，否则就会导致 无限递归 的情况。 5、阶乘理解递归题：用递归的方法求 n！？ 分析：举个例子算5！：&emsp;&emsp;&emsp;那么 5！= 4！x 5， 而 4！= 3！ x 4， 而 3！= 2！x 1， 而 2！= 1！ x 1，而 1！= 1，则可用下面递归公式表示： &emsp;&emsp;&emsp;n = 1&emsp;&emsp;&emsp;&emsp;&emsp;（n = 0 || 1）&emsp;&emsp;&emsp;n x（n - 1）！&emsp;（n &gt; 1） 当然这道题可以用递推法（迭代法）解决，个人感觉递归法属于递推法的反推算法，也不知道理解的对不对！ 代码实现如下（C语言）： 12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;long recursion(int n);void main()&#123; int n; long result; printf( "input a integer number: " ); scanf( "%d", &amp;n ); result = recursion(n); printf( "%d! = %ld\n", n, result );&#125;long recursion(int n)&#123; long temp_result; if( n &lt; 0 ) &#123; printf( "n &lt; 0, input error!\n" ); &#125; else if( n == 0 || n == 1 ) &#123; temp_result = 1; &#125; else &#123; temp_result = recursion(n - 1) * n; &#125; return temp_result;&#125; 阶乘递归 二、汉诺（Hanoi）塔问题汉诺塔问题 由图可知： 1、要求： 将A中的圆盘借助B圆盘完全移动到C圆盘上； 每次只能移动一个圆盘； 并且每次移动时大盘不能放在小盘上面。 2、递归函数的伪算法为如下: 123456if(n == 1) 直接将 A柱上的圆盘从 A柱 移到 C柱;else 先将 A柱上的 （n-1） 个圆盘借助 C柱 移到 B柱; 再将 A柱上的第 n 个圆盘移到 C柱; 最后将 B柱上的 （n-1） 个圆盘借助 A柱 移到 C柱; 该递归算法的时间复杂度为 O（2的n次方），当有 n 个圆盘时，需要移动圆盘（2的n次方-1）次。 汉诺塔分析 为了更好理解汉诺塔问题实现的过程，以下列出 4 种不同层次的汉诺塔实现步骤的 GIF图以更快寻求到其中的规律（想要自己玩的小伙伴 4399小游戏 了解一下）： 三层汉诺塔实现步骤（一共移动 7 次）：三层汉诺塔四层汉诺塔实现步骤（一共移动 15 次）：四层汉诺塔五层汉诺塔实现步骤（一共移动 31 次）：五层汉诺塔六层汉诺塔实现步骤（一共移动 63 次）：六层汉诺塔 代码实现如下（C语言）： 1234567891011121314151617181920212223#include&lt;stdio.h&gt;void move(int n, char A, char B, char C)&#123; if( n == 1 ) &#123; printf( "圆盘 %d ：%c -&gt; %c\n", n, A, C ); // 当n只有1个的时候直接从a移动到c &#125; else &#123; move( n-1, A, C, B ); // 把a的n-1个盘子通过c移动到b printf( "圆盘 %d ：%c -&gt; %c\n", n, A, C ); // 把a的最后1个盘(最大的盘)移动到c move( n-1, B, A, C ); // 吧b上面的n-1个盘通过a移动到c &#125; &#125;void main()&#123; int n; printf( "请输入要移动的圆盘个数：" ); scanf( "%d", &amp;n ); move( n, 'A', 'B', 'C' );&#125; 代码实现 感谢：算法设计方法：递归的内涵与经典应用 —— 书呆子Rico浅析递归算法 —— 风也醉]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扩展运算符（...）]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F24%2Fextension-operator%2F</url>
    <content type="text"><![CDATA[一、前言拓展运算符，是 es6一个很好的特性，它们可以通过减少赋值语句的使用，或者减少通过下标访问数组或对象的方式，使代码更加简洁优雅，可读性更佳。下面我将列出拓展运算符的主要应用场景，以及相关知识。 二、应用1、在函数调用时使用拓展运算符以前如果我们想将数组元素迭代为函数参数使用，一般使用 Function.prototype.apply 的方式： 12345function myFunction(x, y, z) &#123; console.log(x+""+y+""+z);&#125; var args = [0, 1, 2]; myFunction.apply(null, args); 有了展开语法，我们可以这样写： 123456function myFunction(x, y, z) &#123; console.log(x+""+y+""+z); &#125; var args = [0, 1, 2]; myFunction(...args); 提示：...arr 返回的并不是一个数组，而是各个数组的值。只有 [...arr] 才是一个数组，所以 ...arr 可以用来对方法进行传值。 2、数组和对象的拷贝1234567var arr1 = [1,2,3];var arr2 = [...arr1];arr2.push(4);console.log(arr1 === arr2); // falseconsole.log(arr1); // [1,2,3]console.log(arr2);// [1,2,3,4] 对象也是一样，也可以使用拓展运算符： 1234567var obj1 = &#123; a:1, b:2&#125;;var obj2 = &#123;...obj1&#125;;console.log(obj2); //&#123; a:1, b:2&#125;console.log(obj1 === obj2);// false 提示：在这里你会发现，这是一个深拷贝，其实不然，实际上, 展开语法和 Object.assign() 行为一致, 执行的都是浅拷贝（只遍历一层）。 3、构造字面量数组没有展开语法的时候，只能组合使用 push splice concat 等方法，来将已有数组元素变成新数组的一部分： 1234var arr1 = [1,2,3];var arr2 = [4,5,...arr1];console.log(arr2);// [4,5,1,2,3] 代替 Array.concat 函数： 12345var arr1 = [1,2,3];var arr2 = [4,5,6];var demo = [...arr1,...arr2];console.log(demo);// [1, 2, 3, 4, 5, 6] 代替 Array.unshift 方法： 12345var arr1 = [1,2,3];var arr2 = [4,5,6];arr1 = [...arr2,...arr1];console.log(arr1);// [4, 5, 6, 1, 2, 3] 4、字符串转数组1234var demo = "hello"var str = [...demo];console.log(str);// ["h", "e", "l", "l", "o"] 剩余语法（剩余参数，rest运算符）剩余语法(Rest syntax) 看起来和展开语法完全相同，不同点在于, 剩余参数用于解构数组和对象。从某种意义上说，剩余语法与展开语法是相反的：展开语法将数组展开为其中的各个元素，而剩余语法则是将多个元素收集起来并 “凝聚” 为单个元素。 1、主要用于不定参数，所以 es6开始不再使用 arguments对象： 123456789var demo = function (...arg)&#123; for (let item of arg)&#123; console.log(item); &#125;&#125;demo(1,2,3);// 1// 2// 3 1234567var demo = function (a,...arg)&#123; console.log(a); console.log(arg);&#125;demo(1,2,3,4);// 1// [2, 3, 4] 2、配合解构一起使用： 12345var [a,...rest] = [1,2,3,4];console.log(a);console.log(rest);// 1// [2,3,4] 12345678910var obj = &#123; a:1, b:2, c:3&#125;var &#123;a,...demo&#125; = obj;console.log(a);console.log(demo);// 1// &#123;b:2,c:3&#125; 12345678function f(...[a, b, c]) &#123; console.log(a); return a + b + c;&#125;console.log(f(1)) //1, NaN console.log(f(1, 2, 3)) // 1, 6console.log(f(1, 2, 3, 4)) //1, 6 三、小结等号表达式是典型的赋值形式，函数传参和 for循环的变量都是特殊形式的赋值。解构的原理是赋值的两边具有相同的结构，就可以正确取出数组或对象里面的元素或属性值，省略了使用下标逐个赋值的麻烦。对于三个点号，三点放在形参或者等号左边为 rest运算符; 放在实参或者等号右边为 spread运算符，或者说，放在被赋值一方为 rest运算符，放在赋值一方为扩展运算符。 转自原文：Js es6中扩展运算符（…） —— fly63前端网]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[call、apply、bind 了解一下？]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F23%2Fcall%2F</url>
    <content type="text"><![CDATA[一、作用：call apply bind ：用来改变函数调用的 this 指向。 二、实例：1234567891011121314151617181920212223242526272829303132333435// 有只猫叫小黑，小黑会吃鱼const cat = &#123; name: '小黑', eatFish(...args) &#123; console.log('this指向=&gt;', this); console.log('...args', args); console.log(this.name + '吃鱼'); &#125;,&#125;// 有只狗叫大毛，大毛会吃骨头const dog = &#123; name: '大毛', eatBone(...args) &#123; console.log('this指向=&gt;', this); console.log('...args', args); console.log(this.name + '吃骨头'); &#125;,&#125;console.log('=================== call =========================');// 有一天大毛想吃鱼了，可是它不知道怎么吃。怎么办？小黑说我吃的时候喂你吃cat.eatFish.call(dog, '汪汪汪', 'call')// 大毛为了表示感谢，决定下次吃骨头的时候也喂小黑吃dog.eatBone.call(cat, '喵喵喵', 'call')console.log('=================== apply =========================');cat.eatFish.apply(dog, ['汪汪汪', 'apply'])dog.eatBone.apply(cat, ['喵喵喵', 'apply'])console.log('=================== bind =========================');// 有一天他们觉得每次吃的时候再喂太麻烦了。干脆直接教对方怎么吃const test1 = cat.eatFish.bind(dog, '汪汪汪', 'bind')const test2 = dog.eatBone.bind(cat, '喵喵喵', 'bind')test1()test2() 控制台结果 ★ 上述例子可看出：（1）call 跟 apply 的用法几乎一样，唯一的不同就是传递的参数不同，call 只能一个参数一个参数的传入。（2）apply 则只支持传入一个数组，哪怕是一个参数也要是数组形式。最终调用函数时候这个数组会拆成一个个参数分别传入。（3）至于 bind 方法，他是直接改变这个函数的 this 指向并且返回一个新的函数，之后再次调用这个函数的时候 this 都是指向 bind 绑定的第一个参数。bind 传餐方式跟 call方法一致。 由于 apply 函数传参的特殊性，我们又衍生出了一个黑魔法。 1234567// 如果一个数组我们已知里面全都是数字，想要知道最大的那个数，由于Array没有max方法，Math对象上有// 我们可以根据apply传递参数的特性将这个数组当成参数传入// 最终Math.max函数调用的时候会将apply的数组里面的参数一个一个传入，恰好符合Math.max的参数传递方式// 这样变相的实现了数组的max方法。min方法也同理const arr = [1,2,3,4,5,6]const max = Math.max.apply(null, arr)console.log(max) // 6 这里 bind 函数也有一个小技巧： 12345// 如果你想将某个函数绑定新的`this`指向并且固定先传入几个变量可以在绑定的时候就传入，之后调用新函数传入的参数都会排在之后const obj = &#123;&#125;function test(...args) &#123;console.log(args)&#125;const newFn = test.bind(obj, '静态参数1', '静态参数2')newFn('动态参数3', '动态参数4') 控制台结果 三、MDN 文档介绍1、call 语法 fun.call(thisArg, arg1, arg2, ...) thisArg：在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中就是 window 对象)，同时值为原始值(数字，字符串，布尔值)的 this 会指向该原始值的自动包装对象。 arg1, arg2, ... 指定的参数列表 2、apply 语法 fun.apply(thisArg, [argsArray]) thisArg 在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是 window 对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。 argsArray 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为null 或 undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 3、bind 语法 fun.bind(thisArg[, arg1[, arg2[, ...]]]) thisArg 当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。 arg1, arg2, ... 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。 四、总结1、当我们使用一个函数需要改变 this 指向的时候才会用到 call apply bind 2、如果你要传递的参数不多，则可以使用 fn.call(thisObj, arg1, arg2 ...) 3、如果你要传递的参数很多，则可以用数组将参数整理好调用 fn.apply(thisObj, [arg1, arg2 ...]) 4、如果你想生成一个新的函数长期绑定某个函数给某个对象使用，则可以使用 const newFn = fn.bind(thisObj); newFn(arg1, arg2...) 转自原文：聊一聊call、apply、bind的区别 —— Frank_Lin]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[箭头函数]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F22%2FarrowFunc%2F</url>
    <content type="text"><![CDATA[一、码上看懂 =&gt;1、对比一下，看看省了啥、多了啥：es5 函数 12345var f = function () &#123; console.log("function"); return 'value';&#125;f(); es6 箭头函数 12345var arrow_f = () =&gt; &#123; console.log("arrow function"); return 'value';&#125;arrow_f(); 2、只有一个参数时可以省略 () ：es5 函数（带参数） 1234var f = function (v) &#123; console.log(v);&#125;f("function"); es6 箭头函数（带参数） 1234var arrow_f = v =&gt; &#123; console.log(v);&#125;arrow_f("arrow function"); 3、只有一条语句的时候可以省略 {}、return ：es5 函数返回参数 123var f = function (v) &#123; return v;&#125; es6 箭头函数返参 1var arrow_f = v =&gt; v; 4、返回一个对象的时候用 () 包起对象：es5 函数 123456var f = function () &#123; return &#123; name: '韩梅梅', age: 18 &#125;&#125; es6 箭头函数 1234var arrow_f = () =&gt; (&#123; name: '韩梅梅', age: 18&#125;) 注意：参数和箭头之间不能换行。 二、demo 操作：1、重复命名函数：12345678910&lt;body&gt; &lt;script&gt; function fun1(a, a) &#123; console.log(arguments, a); &#125; var arrow = (a, a) =&gt; &#123; console.log(a); &#125; &lt;/script&gt;&lt;/body&gt; 2、this指向：1234567891011121314151617&lt;body&gt; &lt;script&gt; const lilei = &#123; msg: '李雷' &#125; var lileiFunc = function () &#123; var arrow_lileiFunc = () =&gt; &#123; console.log(this.msg); &#125; arrow_lileiFunc(); &#125; lileiFunc.call(lilei); var arrow_func_prototype = () =&gt; &#123; consolo.log("1111"); &#125; &lt;/script&gt;&lt;/body&gt; 3、构造函数：123456789101112131415&lt;body&gt; &lt;script&gt; function Person() &#123; if (!new.target) &#123; console.log('只能使用new调用该构造函数'); &#125; console.log(new.target); &#125; function Person1() &#123; console.log(new.target); &#125; Person(); Person1(); &lt;/script&gt;&lt;/body&gt; 4、arguments：123456789&lt;body&gt; &lt;script&gt; (function () &#123; (() =&gt; &#123; console.log(arguments); &#125;)(); &#125;)(1, 2, 3); &lt;/script&gt;&lt;/body&gt; 三、总结 =&gt; es6 箭头函数 和 es5 函数的区别1、箭头函数不支持重复命名形参，普通函数可以； 2、箭头函数不能使用 call、apply 等方法改变 this； 3、箭头函数的 this 指向定义时所处的上下文的 this； 4、箭头函数没有原型对象 .prototype； 5、箭头函数不能做构造函数； 6、箭头函数没有 arguments。 说明：1、所有函数（除了箭头函数）都能用的变量 [arg1,arg2,arg3]2、es6 引进的返回 new 作用的那个构造函数（构造函数中之中）]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dailyBook]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F14%2FdailyBook%2F</url>
    <content type="text"><![CDATA[输入密码 ❤ 查看文章 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记本</category>
      </categories>
      <tags>
        <tag>日记本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[圣杯布局 & 双飞翼布局]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F07%2Flayout%2F</url>
    <content type="text"><![CDATA[一、背景介绍&emsp;&emsp;2006 年 Matthew Levine 在 《A LIST APART》 上发表了一篇名为 《In Search of the Holy Grail》 的文章，提出了 圣杯布局 的思路。利用 负外边距 来实现我们需要的效果，充分体现了 CSS的艺术 与 负外边距 的强大。比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达 “渴求之物” 的意思。 &emsp;&emsp;之后 淘宝的UED 为了实现同样的效果提出了 双飞翼布局 的思路，据说是玉伯大大提出的，思路是：middle 是鸟的身体，left 和 right 是鸟的翅膀，先把主要的东西 middle 放好，再将翅膀移到合适的位置。双飞翼布局同样也使用了 负外边距 来移动侧栏从而达到目的。 &emsp;&emsp;圣杯布局 与 双飞翼布局的实现，目的都在于：固定左右两栏宽度，中间内容自适应 来实现 三栏式布局。圣杯布局和双飞翼布局有着相似的思路，但是在某些细节上有着不同之处。 二、相同点：1、两侧宽度固定，中间宽度自适应；2、中间部分在 DOM结构上优先，以便先行渲染；3、允许三列中的任意一列成为最高列；4、只需要使用一个额外的 &lt;div&gt; 标签； 三、圣杯布局优点：不需要添加 DOM节点；缺点：中间部分的宽小于左侧部分时就会发生布局混乱，即某一列内容若过多，文字会溢出（middle&lt;left即会变形）。解决方法：等高布局；最小宽度问题：min-width:600px。 1、DOM 结构123456789&lt;body&gt; &lt;header&gt;header&lt;/header&gt; &lt;div class="main"&gt; &lt;div class="middle"&gt;middle&lt;/div&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt; &lt;/div&gt; &lt;footer&gt;footer&lt;/footer&gt;&lt;/body&gt; 首先设置出整个布局的 DOM结构，主体部分是由 main 包裹的 content、left、right 三个盒子容器，其中 content 优先在最前面。 2、CSS 修饰123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; header&#123; width: 100%; height: 20px; background: #999; text-align: center; &#125; footer&#123; width: 100%; height: 20px; background: #555; text-align: center; &#125; .main &#123; width: 500px; height: 300px; background: #ddd; margin: 0 auto; padding-left: 200px; padding-right: 300px; &#125; .middle &#123; width: 100%; height: 100%; background: green; float: left; &#125; .left &#123; width: 200px; height: 100%; background: red; float: left; /* 浮动自身，向上移动一行 */ margin-left: -100%; /* 自身定位 */ position: relative; top: 0; left: -200px; &#125; .right &#123; width: 300px; height: 100%; background: blue; float: left; /* 属性为自身的宽度，上一行的行尾 */ margin-left: -300px; /* 自身定位 */ position: relative; top: 0; right: -300px; &#125;&lt;/style&gt; 圣杯布局 圣杯布局：借助的是其他非主要元素覆盖了其父元素的 padding 值所占据的宽度，同一个杯子，非主要元素其只是占据了全部容器的 padding 值部分。 四、双飞翼布局优点：不会像圣杯布局那样变形；缺点：多加了一层 DOM节点。 1、DOM 结构1234567891011&lt;body&gt; &lt;header&gt;header&lt;/header&gt; &lt;div class="main"&gt; &lt;div class="content"&gt; &lt;div class="middle"&gt;middle&lt;/div&gt; &lt;/div&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt; &lt;/div&gt; &lt;footer&gt;footer&lt;/footer&gt;&lt;/body&gt; 这里的 DOM结构与圣杯布局有稍许出入，在 middle 外添加了了一个 content 盒子容器包裹。 2、CSS 修饰1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; header&#123; width: 100%; height: 20px; background: #999; text-align: center; &#125; footer&#123; width: 100%; height: 20px; background: #555; text-align: center; &#125; .main &#123; width: 1200px; height: 300px; background: #ddd; margin: 0 auto; &#125; .middle &#123; height: 100%; margin-left: 200px; margin-right: 300px; background: pink; &#125; .content &#123; width: 100%; height: 100%; background: green; float: left; &#125; .left &#123; width: 200px; height: 100%; background: red; float: left; margin-left: -100%; &#125; .right &#123; width: 300px; height: 100%; background: blue; float: left; margin-left: -300px; &#125;&lt;/style&gt; 双飞翼布局 双飞翼布局：给 middle 添加一个外层元素 content，left、right 元素所占据的空间是 middle 的 margin空间，像鸟的两个翅膀，与内容部分 content 脱离。 五、总结这里有几点需要留意：1、先写 middle，然后是 left 和 right，因为需要先渲染 middle；2、left、right 需设置 position:relative 以及相应的 left、right 值；3、理解 负边距 的作用，left 的 margin-left:-100% 使它上移一行，同时 right 向左移占据 left 原先位置；同理，right 的 margin-left:-300px 使它上移并靠右。 布局 优点 缺点 圣杯 结构简单，无多余 DOM元素 中间部分的宽度小于左侧时发生布局混乱 双飞翼 支持各种宽高变化，通用性强 DOM结构增多，增加渲染树生成的计算量 感谢：1、圣杯布局和双飞翼布局（前端面试必看） —— 森西悠然2、圣杯布局和双飞翼布局的作用和区别 —— 暖风3、超经典面试题：用多种方法实现圣杯布局和双飞翼布局 —— mytac4、圣杯布局，双飞翼布局及其优缺点 —— DOM曼珠沙华]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css 中的浮动和清除浮动]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F06%2FclearFloat%2F</url>
    <content type="text"><![CDATA[一、浮动…？1、定义：(1) W3C 定义：CSS float 属性定义元素在哪个方向浮动，浮动元素会生成一个块级框，直到该块级框的外边缘碰到包含框或者其他的浮动框为止。(2) MDN 定义：float CSS 属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性（与绝对定位相反）。(3) 浮动的核心总结为一句话：浮动元素会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素！ 2、浮动的特征：(1) 浮动会脱离文档流；(2) 浮动可以内联排列；(3) 浮动会导致父元素高度坍塌。 3、示例：设一个 宽700px 的黑色边框父级元素盒子，里面设置三个 大、中、小 子级元素盒子： 123456789101112131415161718192021222324&lt;style&gt; .container &#123; width: 700px; border: 2px solid #000; &#125; .small &#123; height: 100px; width: 100px; background: red; /* float:left; */ &#125; .middle &#123; height: 100px; width: 200px; background: blue; /* float:left; */ &#125; .large &#123; height: 100px; width: 300px; background: green; /* float:left; */ &#125; &lt;/style&gt; 1234567&lt;body&gt; &lt;div class="container"&gt; &lt;div class="small"&gt;small&lt;/div&gt; &lt;div class="middle"&gt;middle&lt;/div&gt; &lt;div class="large"&gt;large&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 子元素未浮动时，它们会默认撑开父元素的高度： 子盒子未浮动时 子元素添加浮动后，子元素脱离文档流，无法撑起父元素，导致父元素高度塌陷： 子盒子浮动时 那么接下来就是重点了，造成这种情况，我们就得去解决这种不正常的情况 —— 清除浮动！ 二、清除浮动…？1、清除浮动的原因：清除浮动主要是为了解决 子元素浮动 导致 父元素内部高度为 0 （即高度塌陷）的问题。 2、清除浮动的方法：(1) 给浮动元素的容器添加浮动（推荐指数：★）给浮动元素的容器也添加上浮动属性即可清除内部浮动，但是这样会使其整体浮动，影响布局，不推荐使用。 (2) 添加新标签（推荐指数：★★）在最后一个浮动标签后新加一个标签，给其设置 clear：both;核心要点：clear 属性不允许被清除浮动的元素的左边/右边挨着浮动元素，底层原理是在被清除浮动的元素上边或者下边添加足够的清除空间。（注意：我们是通过在别的元素上清除浮动来实现撑开高度的， 而不是在浮动元素上。） 123456&lt;div class="container"&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;div style="clear:both;"&gt;&lt;/div&gt;&lt;/div&gt; ✦ 优点：简单方便，通俗易懂，浏览器兼容性好。✦ 缺点：需要添加大量无语义标签，后期不易维护。 (3) 创建 BFC（推荐指数：★★★）A、给父元素 设置宽高【不推荐】：副作用：父元素宽高写死了，不能根据子元素自动调节。 B、给父元素也 添加浮动【不推荐】：副作用：父元素脱离文档流，父元素的宽度会丢失，且会导致下边的元素上移，不能解决问题。 C、给父元素添加 display:inline-block【不推荐】：副作用：可以解决问题，但会导致宽度丢失。 D、☆ 设置 overflow 属性【常见，副作用最小】：overflow 设置为 非visible 的值。推荐使用 hidden 兼容IE（副作用最小 - 局限在元素阴影或下拉菜单会被截断）。a) auto （溢出显示滚动条）；b) scroll （默认就显示滚动条）；c) hidden （溢出隐藏）[常用]。 ✦ 优点：代码简洁。✦ 缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素。 注：这种方式不兼容 IE6。在 IE6 中有类似 BFC 的隐含属性 hasLayout，开启方式很多，推荐使用 zoom:1。 (4) :after 伪元素清除浮动（推荐指数：★★★★★）结合 :after 伪元素（注意这不是伪类，而是伪元素，代表一个元素之后最近的元素）和 IEhack ，可以完美兼容当前主流的各大浏览器，这里的 IEhack 指的是触发 hasLayout。给浮动元素的容器添加一个 clearfix 的class，然后给这个class 添加一个 :after 伪元素实现元素末尾添加一个看不见的 块元素（Block element）清理浮动。 1234567891011121314151617181920212223242526272829303132// 现代浏览器clearfix方案，不支持IE6/7.clearfix:after &#123; display: table; content: " "; clear: both;&#125;// 全浏览器通用的clearfix方案// 引入了zoom以支持IE6/7.clearfix:after &#123; display: table; content: " "; clear: both;&#125;.clearfix&#123; *zoom: 1;&#125;// 全浏览器通用的clearfix方案【强力推荐】// 引入了zoom以支持IE6/7// 同时加入:before以解决现代浏览器上边距折叠的问题.clearfix:before,.clearfix:after &#123; display: table; content: " ";&#125;.clearfix:after &#123; clear: both;&#125;.clearfix&#123; *zoom: 1;&#125; 通过 CSS伪元素在容器的内部元素最后添加了一个看不见的 空格 &quot;020&quot; 或 点 &quot;.&quot;，并且赋予 clear 属性来清除浮动。需要注意的是为了 IE6 和 IE7 浏览器，要给 clearfix 这个 class 添加一条 zoom:1; 触发 haslayout。 ✦ 优点：符合闭合浮动思想，结构语义化正确。✦ 缺点：IE6-7 不支持伪元素 :after，使用 zoom:1 触发 hasLayout。 (5) :before 和 :after 双伪元素清除浮动（推荐指数：★★★★★） 12345678910.clearfix:after,.clearfix:before&#123; content: ""; display: table;&#125;.clearfix:after&#123; clear: both;&#125;.clearfix&#123; *zoom: 1;&#125; 1234&lt;div class="fahter clearfix"&gt; &lt;div class="big"&gt;big&lt;/div&gt; &lt;div class="small"&gt;small&lt;/div&gt;&lt;/div&gt; ✦ 优点：代码更简洁。✦ 缺点：用 zoom:1 触发 hasLayout。 三、浮动的适用场景1、文字环绕效果：文字环绕效果 2、页面布局：浮动可以实现常规的多列布局，但个人推荐使用 inline-block。浮动更适合实现自适应多列布局，比如左侧固定宽度，右侧根据父元素宽度自适应。 页面布局 3、多个元素内联排列：如前文提到的，浮动可以实现类似 inline-block 的排列，比如菜单多个元素内联排列。但个人推荐使用 inline-block。 多个元素内联排列 四、总结 学习浮动的定义及其特征。 掌握 5种清除浮动的方法。 了解浮动的适用场景。 感谢：1、CSS中的浮动和清除浮动，梳理一下！ —— 齐修_qixiuss2、CSS清除浮动方法总结 —— Damonare3、清除浮动的最常用的四种方法，以及优缺点 —— h_qingyi]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css 中的伪类和伪元素]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F05%2FfakeClass%2F</url>
    <content type="text"><![CDATA[一、介绍：1、为什么用 伪类 和 伪元素是为了格式化文档树以外的信息，也就是说，伪类 和 伪元素 是用来修饰不在文档树中的部分。比如一句话中的第一个字母，或者是列表中的第一个元素。 2、伪类CSS 伪类（Pseudo-classes）是一个选择器，用于 已有元素 处于某种状态时为其添加对应的样式，这个状态是 根据用户行为而动态变化的。由此可以看出，其功能和 class 有些类似，但它是基于文档之外的抽象，只有处于 DOM树无法描述的状态下才能为元素添加样式，所以叫伪类。例如，:hover 可被用于在用户将鼠标悬停在按钮上时改变按钮的颜色。 3、伪元素CSS 伪元素 是用来添加一些选择器的特殊效果，其控制的内容和 元素是没有差别的，但是它本身只是基于元素的抽象。它就像是在标记中添加了一个 不存在于 DOM文档中 的全新的HTML元素，所以称为伪元素。例如，我们可以通过 :before 来在一个元素之前添加一些文本，并为这些文本添加样式。 二、伪类和伪元素的区别1、相同之处：伪类 和 伪元素 都不存在于源文件和文档树中。 2、不同之处：伪类：是基于普通 DOM元素而产生的不同状态，他是 DOM元素的某一特征。伪元素：能够创建在 DOM树中不存在的抽象对象，而且这些抽象对象是能够访问到的。也就是说，伪元素 产生新对象，在 DOM中看不到但可以操作；伪类 不产生新对象，仅是 DOM中一个元素的不同状态。 (1) 伪类 示例说明： 1234&lt;ul&gt; &lt;li&gt;第一列&lt;/li&gt; &lt;li&gt;第二列&lt;/li&gt;&lt;/ul&gt; 如果我们想要给第一列添加样式，可以有以下方法： 方法A、给第一列添加一个类，并在该类中定义样式： 123456&lt;ul&gt; &lt;li class="first-item"&gt;第一列&lt;/li&gt; &lt;li&gt;第二列&lt;/li&gt;&lt;/ul&gt;.first-item&#123;color:orange;&#125; 方法B、给第一个 &lt;li&gt; 设置 :first-child 伪类 来为其添加样式： 123456&lt;ul&gt; &lt;li&gt;第一个&lt;/li&gt; &lt;li&gt;第二个&lt;/li&gt;&lt;/ul&gt;li:first-child&#123;color:orage;&#125; 此时被修饰的 &lt;li&gt; 依然存在于DOM树中。 (2) 伪元素 示例说明： 123&lt;p&gt; Hello World&lt;/p&gt; 想要给该段落第一个字母添加样式，可以有以下方法： 方法A、給第一个字母包裹 &lt;span&gt; 元素并设置样式： 12345&lt;p&gt; &lt;span class="first"&gt;H&lt;/span&gt;ello World&lt;/p&gt;.first&#123;color:red;&#125; 方法B、给 &lt;p&gt;元素设置 P:first-letter 伪元素 为其添加样式： 12345&lt;p&gt; Hello World&lt;/p&gt;p:first-letter&#123;color:red;&#125; 这时看起来像创建了一个虚拟的 span元素 并为其添加样式，但实际上在 DOM树中并不存在这个 span元素。 从上述例子中我们可以看出：伪类的操作对象是文档树中已有的元素，而伪元素则创建了一个文档树外的元素。因此，伪类与伪元素的区别在于：有没有创建一个文档树之外的元素。 3、伪元素使用单冒号还是双冒号？&emsp;&emsp;CSS3规范中要求 使用双冒号（::）表示 伪元素，以此来区分伪类和伪元素，比如 ::before 和 ::after 等伪元素使用双冒号（::），:hover 和:active 伪类使用单冒号（:）。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号（::）表示方法。&emsp;&emsp;然而除了少部分伪元素如 ::backdrop 必须使用双冒号（::），大部分伪元素都支持单冒号和双冒号的写法，比如 ::after，写成 :after 一样可以正常运行。&emsp;&emsp;W3C标准中说到，虽然CSS3标准要求伪元素使用双冒号的写法，但也依然支持单冒号的写法。为了向后兼容，我们建议你在目前还是使用 单冒号 的写法。 三、主要用法1、常用的 伪类 和 伪元素：伪类的分类及作用 伪元素的分类及作用 2、详细参见：MDN 标准伪类索引：MDN 标准伪类索引 MDN 标准伪元素索引：MDN 标准伪元素索引 感谢：1、伪类与伪元素的区别和用法 —— 爽朗琴天2、CSS中伪类及伪元素用法详解 —— 路修远而求索]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css 属性：box-sizing]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F04%2Fbox-sizing%2F</url>
    <content type="text"><![CDATA[一、先了解盒模型由于涉及到盒子的计算方式，所以在学习 box-sizing 这个属性前，我们先了解一下 盒模型（Box Model）。什么是 盒模型？根据 W3C 给出的解释：对一个网页来说，基本上页面上所有的元素对象，其实际的呈现形式都是一个盒子形状的抽象。如下图： 盒模型 从图中可以看出，这个所谓的盒子其实就一个长方形（或者正方形）的抽象。从外到内，他由4层东西组成，分别是margin，border，padding，content。他们的结构特征是一层包裹着一层。 Margin（外边距） - 清除边框区域。Margin没有背景颜色，它是完全透明的； Border（边框） - 边框周围的填充和内容。边框是受到盒子的背景颜色影响； Padding（内边距） - 清除内容周围的区域。会受到框中填充的背景颜色影响； Content（内容） - 盒子的内容，显示文本和图像。 二、两种不兼容的盒模型对盒模型有了了解之后，我们就需要知道两种不一样的盒模型： W3C 标准盒模型 IE 盒模型 通过对这两个盒模型的了解后，我们便明白 box-sizing 产生的原因了。 1、W3C 标准盒模型： 标准盒模型 &emsp;&emsp;标准盒模型中 content内容 的大小就是 width 和 height 的值。整个盒子实际占用的空间是 width + padding + border + margin。举个栗子，盒子的样式属性如下： 1234567891011121314&lt;style&gt; .box &#123; width: 20px; padding-left: 1px; padding-right: 2px; border-left: 3px; border-right: 4px; margin-left: 5px; margin-right: 6px; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt; 那么整个 div盒子 在页面中占用的 宽度 就是 20 + 1 + 2 + 3 + 4 + 5 + 6 = 41px。 2、IE 盒模型： IE盒模型 &emsp;&emsp;通过图片对比盒子宽高，可得出结论，IE 盒模型与标准盒模型的 核心差异 在于：IE盒模型的 content 部分包含了 border 和 padding。&emsp;&emsp;这种情况下，padding 和 border 反占了一部分的 width 和 height，也就是说实际上 内容区域 呈现的 真实内容 所占的空间变小了。以宽为例，真实内容的宽度为 width - border - padding。&emsp;&emsp;那么此时 内容区域 的宽便是 width - border - padding + border + padding = width。所以整个盒子实际占用的空间就是 content + margin。还是上面那个栗子，在IE 盒模型下它的实际占宽就是 （20 - 1 - 2 - 3 - 4） + 1 + 2 + 3 + 4 + 5 + 6 = 20 + 5 + 6 = 31px。 ★ 那么就是因为存在着这两种不同的盒模型，要是没有对网页的文档进行类型声明（html5 声明的文档 默认用 W3C标准来渲染页面），各个浏览器会按照自己的标准去使用不同的盒模型渲染。这里说的就是 IE浏览器最为鹤立鸡群。那么这里我们就需要用到 css中的 box-sizing 属性来解决这种 不同浏览器执行不同的盒模型导致的渲染方式不一 的情况。 三、box-sizingbox-sizing 是 CSS3 的 Box Model（盒模型）属性之一。 box-sizing 属性允许你以特定的方式定义匹配某个区域的特定元素。其语法如下： box-sizing: content-box | border-box | inherit 值 描述 说明 content-box 这是由 CSS2.1 规定的宽度高度行为。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框 此值为其默认值，其让元素维持W3C的标准盒模型 border-box 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度 此值让元素维持IE传统的Box Model（IE6以下版本） inherit 规定应从父元素继承 box-sizing 属性的值 —— box-sizing 属性现代浏览器都支持，但IE家族只有 IE8版本以上才支持，虽然现代浏览器支持 box-sizing，但有些浏览器还是需要加上自己的前缀。 box-sizing 使用场景1、特殊场景的布局：&emsp;&emsp;假设我们有这样的一个场景，设置子类元素的 margin 或者 border 时，可能会撑破父层元素的尺寸，这时我就需要使用 box-sizing: border-box 来将 border 包含进元素的尺寸中，这样就不会存在撑破父层元素的情况了。 2、统一风格的表单元素：&emsp;&emsp;表单中有一些 input元素其实还是展现的是传统 IE盒模型，带有一些默认的样式，而且在不同平台或者浏览器下的表现不一，造成了表单展现的差异。此时我们可以通过 box-sizing 属性来构建一个风格统一的表单元素。 感谢：W3Cschool]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BFC 和 IFC]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F02%2FBFC%2F</url>
    <content type="text"><![CDATA[一、前言学习 BFC 之前，先简单了解一下 普通流（normal flow，也称文档流）。普通流 就是将窗体自上而下分成一行一行，块级元素从上至下、行内元素从左至右 地依次排放元素的过程。那么普通流是怎么样把页面布局呈现的呢？常见的就是通过 BFC 和 IFC。 二、BFC（块级格式化上下文）1、MDN 定义：&emsp;&emsp;块格式化上下文（Block Formatting Context，BFC），是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 2、创建条件：&emsp;&emsp;(1) ★ 根元素 HTML&emsp;&emsp;(2) ★ 浮动元素（元素的 float 不是 none）&emsp;&emsp;(3) ★ 绝对定位元素（元素的 position 为 absolute 或 fixed）&emsp;&emsp;(4) ★ 行内块元素（元素的 display 为 inline-block）&emsp;&emsp;(5) ★ 表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）&emsp;&emsp;(6) 表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）&emsp;&emsp;(7) 匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是 HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）&emsp;&emsp;(8) ★ overflow 值不为 visible 的块元素&emsp;&emsp;(9) display 值为 flow-root 的元素&emsp;&emsp;(10) contain 值为 layout、content或 paint 的元素&emsp;&emsp;(11) ★ 弹性元素（display为 flex 或 inline-flex元素的直接子元素）&emsp;&emsp;(12) 网格元素（display为 grid 或 inline-grid 元素的直接子元素）&emsp;&emsp;(13) 多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）&emsp;&emsp;(14) column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中。 3、渲染规则：&emsp;&emsp;(1) 在正常的文档流中，块级元素是按照 从上自下 排列的。如果我给里面的元素一个 float 或者绝对定位，它就会脱离普通文档流；&emsp;&emsp;(2) BFC 在页面上是一个 独立的容器，最显著的效果就是建立一个隔绝的空间，外面的元素不会影响BFC里面的元素，反之，里面的元素也不会影响外面的元素；&emsp;&emsp;(3) BFC 的区域 不会 与浮动元素的盒子重叠；&emsp;&emsp;(4) ★ 垂直方向 上的外边距会发生边距折叠（包括父子元素和兄弟元素），水平方向 不会发生边距折叠。 4、作用：&emsp;&emsp;(1) 解决边距重叠；(2) 清除浮动。 5、示例：&emsp;&emsp;(1) 解决边距重叠：&emsp;&emsp;网页中我放了一个标题 h1 和三个 p 段落，为了更好看清楚边距我都设置了一个红色背景，这里我设置了 p 段落的上下边距为 20px。正常逻辑来讲，line 1 和line 2 之间的间距是 20px + 20px = 40px，可是我们很清楚的发现，line 1 和 line 2 之间、line 2 和 line 3 之间的间距仍是 20px。那么此时就是发生了垂直方向上的边距重叠现象： 为解决这个问题，我们就可以去创建一个 BFC，即创建一个 块级元素上下文的格式环境，如上述创建 BFC 条件中我们利用 (8) 来给我们的 line 1 添加一个父元素盒子，设置 css属性 overflow: hidden，边距重叠问题便解决了，如图所示： &emsp;&emsp;(2) 清除浮动： 1234567891011121314151617&lt;style&gt; .one &#123; /* 在文档流中，标签和文字将 父元素 撑起来了 */ background: pink; /* overflow: hidden; */ &#125; .two &#123; /* 浮动后离开了文档流 */ float: left; &#125; &lt;/style&gt;&lt;body&gt; &lt;div class="one"&gt; &lt;div class="two"&gt;hello world&lt;/div&gt; &lt;/div&gt; 你好世界！&lt;/body&gt; 这里的子元素 “two” 在设置了浮动后，脱离了文档流，父元素 “one” 的内容为空，背景色不见了： 那么此时我们需要去清除浮动，当然清除浮动的方式有很多，这里我们利用创建 BFC 来清除浮动。同样，我们在 浮动元素的父元素 即 “one” 里面添加 overflow: hidden 属性，浮动问题便解决了，效果如图： 【 点 我 了解更多清除浮动的方法】 三、IFC（行内格式化上下文）1、定义：&emsp;&emsp;内联格式化上下文（Inline Formatting Contexts，IFC），是内联元素渲染和排列的规则。 2、创建条件：&emsp;&emsp;当元素的 CSS 属性 display 的计算值为 inline, inline-block 或 inline-table 时，称它为行内级元素，IFC会起作用。 3、渲染规则：&emsp;&emsp;(1) 盒子水平 从左至右 的紧密排列（此时横向的 padding、margin、border 都是有效的）；&emsp;&emsp;(2) 垂直方向的对齐，可能是底部对齐，顶部对齐，或者基线对齐（这个是默认的）；&emsp;&emsp;(3) 一个或者多个 内联盒子（内联元素的盒子（span，strong 等）和 匿名内联盒子（只有文本，没有内联元素包含，自动创建的）合称内联盒子）组成一个 行框，行框的宽度由包含块和出现的浮动决定的；&emsp;&emsp;(4) 当一个行框水平不能容纳内联盒子时，它们将会在垂直方向上产生多个行框且 上下紧密相接，不重叠；&emsp;&emsp;(5) 行框中的内联盒子高度小于行框的高度时，内联盒子垂直方向的对齐方式取决于 vertical-align 属性；&emsp;&emsp;(6) 多个内联盒子的宽度小于包含他们的行框时，他们在水平方向的分布取决于 text-align 属性（默认 left）；&emsp;&emsp;(7) 一般来说，行框的左边界紧挨着包含容器的左边界，行框的右边界紧挨着包含容器的右边界（两个边都紧挨着）。然而，浮动盒子可能存在于 包含边框边界 和行框边界之间。 行框（行盒） 4、作用：&emsp;&emsp;水平居中 —— 当一个 “块” 要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过设置父容器 text-align:center 则可以使其水平居中。 5、示例：&emsp;&emsp;(1) 行内盒的高度和宽度设置是无效的，所以他们的高度是有 line-height 决定的。当然，行内盒是可以有外边距、边框和内边距的。&emsp;&emsp;(2) 行内盒根据他的 vertical-align 定位。 inline 的 span 元素和替换元素 img，他们默认是按照基线对齐的（黑色的线），修改这两个元素的 vertical-align： 1234&lt;div&gt; &lt;span style="border:1px solid blue;vertical-align: middle;"&gt;我是span&lt;/span&gt; &lt;img style="border:1px solid red;vertical-align: middle;" src="favicon.ico"&gt;&lt;/div&gt; 我们可以得到： 这样两个元素就居中显示了。 四、总结&emsp;&emsp;BFC，IFC，都是控制元素如何进行布局的。BFC 是应用于块级元素（div、p…）上的规则。IFC 是应用于内联元素（span、em、i…）上的规则。&emsp;&emsp;在文档呈现开始的时候，都会自动创建一个 BFC 和 IFC 来对整个页面进行布局。我们要是没有设置属性去创建新的 BFC 的话，整个文档就这一个 BFC 和 IFC，所有的元素都要使用这个规则。&emsp;&emsp;在普通流中，所有的盒子（不管是内联盒子（内联元素等）还是块级盒子（块级元素等））都要属于一个格式化上下文，不是属于块级格式化上下文就是属于内联格式化上下文，但是不能同时属于两者，块级元素布局遵循块级格式化上下文的规则，内联元素布局遵循内联格式化上下文的规则来进行布局。就是这两个规则使得页面的所有元素有序的布局，才呈现出我们所看到的 web页面。 感谢：1、CSS之BFC（块级格式化上下文） —— todayhappy2、IFC（行内格式化上下文） —— ZYT]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css 中的弹性布局]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F02%2Fflex%2F</url>
    <content type="text"><![CDATA[前言Flex（Flexible Box），意为”弹性布局”。“弹性”，顾名思义，就是具有弹簧的特性啦，能够自由的伸缩（有点自适应的意思啦）。 其实 Flex并不是最近才出现的，而是早在十年前它就被提出。2009年，W3C提出了一种新的方案 —— Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。 Flex布局如何使用？任何一个容器都可以指定为 Flex布局 123.box&#123; display: flex;&#125; 行内元素也可以使用Flex布局 123.box&#123; display: inline-flex;&#125; 示例： Flex概念知识采用Flex布局的元素，称为 Flex容器（flex container），简称“容器”。它的所有子元素自动成为容器成员，称为 Flex项目（flex item），简称“项目”。 容器默认存在两根轴： 水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。 是不是感觉又学到了？概念的东西了解就好了，这个不用记忆，不会跟上学背课文一样，还考试了。 Flex容器属性一、flex-direction：决定项目（item）的排列方向flex-direction 有四个值：1、row（默认值）：主轴为水平方向，起点在左端。2、row-reverse：主轴为水平方向，起点在右端。3、column：主轴为垂直方向，起点在上沿。4、column-reverse：主轴为垂直方向，起点在下沿。 上方那个示例图，我们稍稍变阵一下，主轴设置为垂直方向，就会出现下图布局。 示例： 还可以设置主轴为垂直方向，起点在下沿。 示例： 是不是觉得以后布局就用他（Flex）了？ 二、flex-wrap默认情况下，item 都排在一条线（又称”轴线”）上。flex-wrap 属性定义了，如果一条轴线排不下，item 的换行方式。 示例： flex-wrap 有三个值：1、nowrap（默认）：不换行2、wrap：换行，第一行在上方。3、wrap-reverse：换行，第一行在下方。 示例： 三、flex-flowflex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为row nowrap。 123.box &#123; flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;;&#125; 示例： 四、justify-content：定义了item在主轴上的对齐方式justify-content 有五个值：1、flex-start（默认值）：左对齐2、flex-end：右对齐3、center： 居中4、space-between：两端对齐，项目之间的间隔都相等。5、space-around：每个item两侧的间隔相等。所以，item之间的间隔比item与边框的间隔大一倍。 示例： 五、align-items：Item在交叉轴上如何对齐1、flex-start：交叉轴的起点对齐。2、flex-end：交叉轴的终点对齐。3、center：交叉轴的中点对齐。 示例： 4、baseline: 项目的第一行文字的基线对齐。 5、stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 六、align-content：多根轴线的对齐方式多根轴线如何出现？宽度超出，换行后就会有多根轴线了。 1、flex-start：与交叉轴的起点对齐。2、flex-end：与交叉轴的终点对齐。3、center：与交叉轴的中点对齐。4、space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。5、space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。6、stretch（默认值）：轴线占满整个交叉轴。 对比一下添加 align-content 和没有 align-content 的区别：示例： 项目(Item)的属性一、orderItem 的排列顺序。数值越小，排列越靠前，默认为0。 示例： 赋予 item，一个排序值，根据这个值进行排序。没有设置值的默认是 0。 二、flex-grow定义 Item的放大比例，默认为 0，即如果存在剩余空间，也不放大。意思就是将 100% 宽 / 高按什么比例分。 举例：如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow属性为 2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。（看上图示例） 三、flex-shrink定义了 Item的缩小比例，默认为 1，即如果空间不足，该 Item将缩小 看上图：3个 item的宽度和：100+200+200=500px，超出了 box（400px）的宽度（超出了100px的宽），这时候 item1 / item2都设置了 flex-shrink 为 0，而 item3 设置了 flex-shrink 为 1，所以，宽度不够时，item3 将收缩，这里 item3 实际的宽度就是 100px。 再看下图： item1 / item3 设置 flex-shrink 为 1，而 item2 的 flex-shrink 为 0，也就是说，此时宽度超出后，将由 item1、item3 来等比缩小宽度，item2 保持原有宽度。 四、flex-basisflex-basis 属性定义了在分配多余空间之前，Item 占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即 Item 的本来大小。 示例： 这个属性可以直接设置宽高代替，如上图注释部分。 五、flexflex属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。 所以最前面的几个示例，都直接写的 flex，其实 flex 就 flex-grow, flex-shrink 和 flex-basis 的简写。 六、align-selfalign-self 属性允许单个 Item有 与其他 Item 不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。 示例： 这样，就会把容器的 align-items，覆盖掉。 总结看完上面内容，是不是发现 Flex 基本上可以搞定大部分的前端布局？确实是这样，它就是这么强大，这也是他广受大家喜爱的一个重要原因，如果不考虑低版本浏览器兼容问题，我相信，float大家应该用的越来越少了。 作者：向建峰_Javan链接：http://www.imooc.com/article/287525来源：慕课网 —— CSS3中Flex弹性布局该如何灵活运用？]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css 单位]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F09%2F01%2Funit%2F</url>
    <content type="text"><![CDATA[一、写在前面的结论css 的长度单位主要有以下几种：px em rem vh vw vmin vmax % in cm mm pt pc ch ex，大概可以分为 “绝对单位” 、 “相对单位” 和 “百分比单位”。绝对单位： in cm mm相对单位：px pt pc em rem ch ex百分比单位：vh vw vmin vmax % 网页设计常用单位：px 代表物理屏幕上能显示出的最小的一个点；em 和 “%” 都是相对于父级的字体大小；rem 是相对于 HTML根元素的字体大小；vh：相对于视口的高度，1vh 等于 1/100 的视口高度；vw：相对于视口的宽度，1vw 等于 1/100 的视口宽度；vmin：vw 和 vh中较小的那个；vmax：vw 和 vh中较大的那个。 pc pt ch 在网页设计上基本用不到，多用于排版。 二、深度剖析1、pxpx 就是 pixel（像素），相对于显示器屏幕分辨率 而言，是设备或者图片以及我们在网页设计中的常用单位，也是基本单位。通过 px 可以设置固定的布局或者元素大小，缺点是没有弹性（在移动端手机分辨率种类颇多，不可能一个个去适配，所以这时就要考虑 em 和 rem 了）。例如：电脑像素 1024x768 表示的是水平方向 1024 个像素点，垂直方向 768 个像素点。 2、em参考父元素的 font-size，具有继承的特点，即 继承父级元素 的字体大小。如果自身定义了 font-size 按自身来计算（浏览器默认字体是 16px）。使用 em 的好处是在响应式设计中，利用 em 的特性，你可以只通过改变 body 的字体大小一个值就修改了整个页面的各种宽度大小。例如：前面已经说了浏览器默认字体是 16px，所以 1em=16px，则 12px=0.75em，10px=0.625em。另外：要是 Font-size=62.5%，则 em 值变为 16px*62.5%=10px。这样 1em=10px，1.2em=12px 就利于我们进行换算。 3、remrem 是 相对于根元素HTML，所以我们只需要在根元素确定一个参考值，可以设计 HTML为大小为 10px，到时设置 1.2rem 就是 12px，以此类推。优点在于 rem 用于响应式设计通过改变根元素HTML 的字体大小就可以修改整个页面的各种宽度大小。例如：根元素设置字体大小 10px，标题想要 20px，容器就设 2rem；正文想要 14px，容器就设 1.4rem。 4、%(1) 对于 position: static; 普通定位元素就是我们理解的父元素；(2) 对于 position: absolute; 的元素就是相对于已定位的父元素；(3) 对于 position: fixed; 的元素就是相对于可视窗口 ViewPort。 6、vhcss3 新单位，view height的简写，是指 可视窗口的高度。假设高度是 1200px的话，那 10vh 就是 120px。例如：浏览器高度 900px，则1 vh = 900px/100 = 9 px。 5、vwcss3 新单位，view width的简写，是指 可视窗口的宽度。假设宽度是 1200px 的话，那 10vw 就是 120px。例如：浏览器宽度 1200px，则 1 vw = 1200px/100 = 12 px。 7、vm（vmin / vmax）css3 新单位，相对于视口的宽度或高度 中较小 / 较大的那个。其中最小 / 最大的那个被均分为100单位的vm。例如：浏览器高度 900px，宽度 1200px，取最小 / 最大的浏览器高度，1 vm = 900px/100 = 9 px。不过兼容性太差，现在基本上没人用。 三、其他单位in：寸 cm：厘米 mm：毫米 pt：point，约 1/72 寸 pc：pica，约 6pt，1/6 寸 ch：以节点所使用字体中的 “0” 字符为基准，找不到时为 0.5em注：ie10+、chrome 31+、safair 7.1+、opera 26+、ios safari 7.1+、android browser 4.4+ 支持 ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以 0.5em 计算注：IE11 及以下均不支持，firefox、chrome、safari、opera、ios safari、android browser 4.4+ 等均需属性加么有前缀 四、拓展：屏幕适配的几种方法1、流式布局：&emsp;&emsp;在页面布局的时候都是通过百分比来定义宽度，但是高度大都是用 px 来固定住，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度还是和原来一样，实际显示非常的不协调，这就是流式布局的最致命的缺点，往往只有几个尺寸的手机下看到的效果是令人满意的。其实很多视觉设计师应该无法接受这种效果，因为他们的设计图在大屏幕手机下看到的效果相当于是被横向拉长来一样。&emsp;&emsp;流式布局并不是最理想的实现方式，通过大量的百分比布局，会经常出现许多兼容性的问题，还有就是对设计有很多的限制，因为他们在设计之初就需要考虑流式布局对元素造成的影响，只能设计横向拉伸的元素布局，设计的时候存在很多局限性。 2、固定宽度：&emsp;&emsp;把页面设置成 320的宽度，超出部分留白，这样做视觉，前端设计都挺开心，UI再也不用被流式布局限制自己的设计灵感了，前端也不用流式布局。&emsp;&emsp;但是这种解决方案也是存在一些问题，例如在大屏幕手机下两边是留白的，还有一个就是大屏幕手机下看起来页面会特别小，操作的按钮也很小。 3、响应式：&emsp;&emsp;响应式这种方式在国内很少有大型企业的复杂性的网站在移动端用这种方法去做，主要原因是工作大，维护性难，所以一般都是中小型的门户或者博客类站点会采用响应式的方法从 web page 到 web app 直接一步到位，因为这样反而可以节约成本，不用再专门为自己的网站做一个 web app 的版本。 4、通过viewport进行缩放：&emsp;&emsp;以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。说实话我觉得它和用接下去我们要讲的rem都非常高效，不过有部分同学使用过程中反应缩放会导致有些页面元素会糊的情况。 5、☆ rem等比例适配所有屏幕： 1234567891011121314151617181920212223242526272829(function() &#123; var currClientWidth, fontValue, originWidth; originWidth = 750; // ui设计稿的宽度，一般750或640 __resize(); window.addEventListener('resize', __resize, false); function __resize() &#123; currClientWidth = document.documentElement.clientWidth; if (currClientWidth &gt; 768) &#123; currClientWidth = 768; &#125; if (currClientWidth &lt; 320)&#123; currClientWidth = 320; &#125; fontValue = ((625 * currClientWidth) / originWidth).toFixed(2); document.documentElement.style.fontSize = fontValue + '%'; &#125;&#125;)();// 当前假如当前分辨率是375，设计稿分辨率是750// 750/375=0.5// 比例关系是0.5倍// 再算一下你要换算1rem等于多少px，// 假如我要100， 100/16=6.25// 把这个换算的乘以刚才得出的比例// 0.5*625=312.5// 最后还拼接了一个百分号 = 312.5%// 就是在375分辨率下 1rem = 312.5%// 312.5% * 16px = 50px &emsp;&emsp;通过 js 来判断当前屏幕大小，进而设置 HTML 的 font-size，代码里面 rem 的值就是 UI 设计稿上量的 px 除以 100 就是你代码中要写的 rem 值。 五、兼容性rem 兼容性 vh vw vmin vmax 兼容性 感谢：1、css单位介绍 —— cysear2、CSS3 的视口单位vw、vh实现自适应 —— Least27273、手机端h5页面屏幕适配的几种方法 —— 老蜜4、一次搞懂CSS 字体单位 —— 前端达人]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原型链、prototype、__proto__ 的关系]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F31%2Fprototype%2F</url>
    <content type="text"><![CDATA[☆ 转载：一张图弄清 Javascript 中的原型链、prototype、proto的关系原型链、prototype、__proto__的关系 ☆ 转载：图解原型链三角恋关系用文字来说就是：构造函数的 prototype 属性指向构造函数的原型，构造函数的原型的 constructor 属性指向构造函数，构造函数生成的实例的 __proto__ 属性指向构造函数的原型。 ☆ 转载：非让你搞懂JavaScript中的原型链不可原型链关系]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[概念理解]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F31%2Fconception%2F</url>
    <content type="text"><![CDATA[输入密码 ❤ 查看文章 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改 DOM 元素的方法]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F30%2FupdateDOM%2F</url>
    <content type="text"><![CDATA[修改内容（3种方法） elem.innerHTML: 获取或设置元素开始标签到结束标签之间的原始 HTML 代码片段； elem.textContent: 获取或设置元素开始标签到结束标签之间的纯文本内容（要考虑兼容性问题 IE9+）； 获取表单元素的内容：value 修改属性（2种方法） 核心 DOM：操作一切结构化文档的 API(HTML, XML)： elem.getAttribute(); elem.setAttribute(attr, …); 判断是否包含属性：elem.hasAttribute(); 移除属性：elem.removeAttribute(); HTML DOM：对部分常用DOM的简化版本（常用）： 获取属性值：elem.属性名； 修改属性值：elem.属性名 = ‘值’； 判断是否包含属性：elem.属性名 === ‘’不包含； 移除属性：elem.属性名 = ‘’； 延伸 – 三大状态属性我们常在表单元素中遇到三大状态属性：selected checked disabled； 不过我们无法使用DOM核心来操作这些状态属性，因此我们需要使用HTML DOM方法： 使用HTML DOM可以操作三大状态：(elem.disabled; elem.selected; elem.checked)值是布尔值； 代码的维护性： 后续再更改网站样式的时候，如果样式比较多，首选使用类，然后把类添加到内容里面；这样便于代码的维护性。 添加和删除： 1234// 创建空元素var Jay = document.createElement('Jaunty');Jay.href = 'www.baidu.com';Jay.innerHTML = 'G'; (1) 末尾加： document.body.appendChild(Jay); // 需要添加到body中； (2) 中间插入： parent.insertBefore(newTarget, oldtarget); (3) 替换： parent.replaceChild(child, oldChild); 优化： 尽量少的修改DOM树原因：页面加载过程中，尽量少的修改DOM，每次修改，都会导致DOM树的重排和重绘，这样会对性能造成影响； html – DOM Tree丨render Tree（圣诞树）– 每次修改DOM树，都会导致DOM树的重新计算高度和宽度；丨css – css样式。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查找 DOM 元素的方法]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F29%2FfindDOM%2F</url>
    <content type="text"><![CDATA[查找方法用HTML查找：优点：范围可大可小，可设置条件； 包括五种方式： 按 id 查找； 按 标签名 查找： var elems = parent.getElementsByTagName(‘’); 按 name属性 查找：要回传给服务器的元素需要name属性，专门找表单中有name属性的表单元素； 按 class属性 查找： var elems = parent.getElementsByClassName(‘class’); 注意：(1) 可在任意父元素上调用；(2) 可返回多个元素的组成的集合；(3) 不要求全部匹配，只要包含即可； 缺点：每次只能按一个条件查找，如果条件复杂的话，就无法一句话获得想要的元素； 这是重点强调的选择器，按选择器查找(常用)(1) 只找一个元素： var elem = parent.querySelector(‘selector”);(2) 找多个元素： var elems = parent.querySelectorAll(‘selector’); 使用选择从使用的难易程度： 当条件复杂时：按选择器查找 – 简单；按HMTL查找 – 繁琐； 返回值：getElementsByTagName() 返回多个元素的 动态集合（不实际存储对象的属性值，每次访问，都要重新查找DOM树）；querySelectorAll() 返回多个元素的 非动态集合（实际存储对象的所有值，即使返回反复访问集合，也不会导致反复查找DOM树）。 单次查找效率：按 HTML查找 – 效率高；按选择器找 – 效率低； &emsp;&emsp;在这里，我们重点介绍下querySelector() 和querySlectorAll() ，这两个方法支持CSS查询。可以通过document和element类型的实例来调用他们，目前完全支持他们的浏览器有：IE8+、Firefox 3.5+、Safari 3.1+、Chrome、Opera 10+ querySelector()： 1234567891011// 取得 body 的元素var body = document.querySelector("body");// 取得 ID 为 "myDiv" 的元素var myDiv = document.querySelector("#myDiv");// 取得类为 "selected" 的第一个元素var selected = document.querySelector(".selected");// 取得类为 "button" 的第一个图像元素var img = document.body.querySelector("immg.button"); querySlectorAll()： &emsp;&emsp;querySlectorAll() 方法接受的参数与 querySelector() 方法一样，都是一个 CSS 选择符，但返回的是所有匹配的元素而不仅仅是一个元素。这个方法返回的是一个 NodeList 的实例。 12345678// 取得某 &lt;div&gt; 中所有的 &lt;em&gt; 元素（类似于 getElementsByTagName("em")）var ems = document.getElementById("myDiv").querySlectorAll("em");// 取得类为 "selected" 的所有元素var selecteds = document.querySelectorAll(".selected");// 取得所有 &lt;p&gt; 元素中的所有 &lt;strong&gt; 元素var strongs = document.querySelectorAll("p strong");]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[了解区块链]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F27%2FBlockchain%2F</url>
    <content type="text"><![CDATA[前言 区块链技术被认为是继蒸汽机、电力、互联网之后，下一代颠覆性的核心技术。 如果说蒸汽机释放了人们的生产力，电力解决了人们基本的生活需求，互联网彻底改变了信息传递的方式，那么区块链作为构造信任的机器，将可能彻底改变整个人类社会价值传递的方式。以前是靠信誉、靠百年老店、权威机构等，区块链利用技术建立了新的信任方式，这是可以被量化的，从技术的角度实现的，所以说区块链成为了下一个信任的基石。区块链最核心的革命特性是改变千百年来落后的信用机制。 那么如何简单通俗的理解 区块链 呢？ 1. 区块链的举例&emsp;&emsp;区块链的本质是一个分布式的公共账本，任何人都可对这个账本进行核查，但不存在单一的用户可以对它控制。在区块链系统中的参与者共同维持账本的更新：它只能按照严格的规则和共识进行修改。 &emsp;&emsp;举例：如果A借了B 100块钱，这个时候，A在人群中大喊“我是A，我借给了B 100块钱！”，B也在人群中大喊“我是B，A借给了我100块！”此时路人甲乙丙丁都听到了这些消息，因此所有人都在心中默默记下了“A借给了B100块钱”。这个系统中不需要银行，也不需要借贷协议和收据，严格来说，甚至不需要人与人长久的信任关系（比如B突然又改口说“我不欠A钱！”，这个时候人民群众就会站出来说“不对，我的小本本上记录了你某天借了A100块钱！”）。 &emsp;&emsp;这是一个去中心化的系统，整个系统中没有了权威的中心化代理，信息的可信度和准确性便会面临问题。 &emsp;&emsp;那么这时可能你已经发现了，在上述的模型中，所谓的“100块钱”已经不重要了。换句话说，任何东西都可以在这个模型中交换，甚至你可以凭空杜撰一个东西，只要大家承认，你就可以让你杜撰的东西流通。比如：我在人群中高喊一声“我创造了10个查克拉！”，我甚至不需要知道查克拉是什么，也不需要关心世界上是不是真的有查克拉，只要大家都听到，然后在自己的小本本上记下“LaiW3n有10个查克拉”，于是我就真的有100个查克拉了。从此以后，我便可以声称我给了某人1个查克拉，只要路人甲乙丙丁都收到并且承认了这一信息，那我就算完成了这次交易，哪怕世界上没有查克拉。又比如：“比特币”，区块链是比特币的底层技术，真正的区块链和比特币比上述的模型复杂太多，细节也丰富太多。 但是存在以下问题： &emsp;&emsp;假设过了很长一段时间，凭空创造的查克拉已经在这个系统中流通了起来，大家都开始认可了查克拉。但是这个系统中一共就只有10个查克拉，于是有人动了坏心思，他在人群中高呼“我有10个查克拉！”怎么办？大家是直接在本本上记下他有10个查克拉么，这样不是人人都可以伪造查克拉了么？ &emsp;&emsp;为了防止这种现象发生，决定在我创造查克拉的时候给我的查克拉打上标记（更准确地说，我是给我喊的那句“我创造了10个查克拉”打上标记，比如标记为001），这样以后在每一笔交易的时候，我在高喊“我给了某某1个查克拉！”的时候，会附加上额外的一句话：“这1个查克拉的来源是记为001的那条记录，我的这句话标记为002！”。我们再抽象一点，某人喊话的内容的格式就变成了：“这句话编号xxx，上一句话的编号是yyy，我给了某某1个查克拉！”，这样就解决了伪造的问题。其实上述模型就变成一个简化的中本聪第一版 比特币区块链协议。 &emsp;&emsp;看到这里基本已经能够生动形象又不涉及任何细节地解释区块链了。但是任然存在以下疑问： “凭啥？” &emsp;&emsp;“凭啥你喊一句话我就帮你记？我的小本本不要钱么？”。为了激励大家帮我传话和记账，我决定给第一个听到我喊话并且记录在小本本上的人一些奖励：第一个听到我喊话并记录下来的人，你就凭空得到了1个查克拉，这个查克拉是整个系统对你幸苦记账的报酬，而你记录了这句话之后，要马上告诉其它人你已经记录好了，让别人放弃继续记录这句话，并给你自己的记录编号让别人有据可查，然后你再把我的话加上你的记录编号一起喊出来，供下一个人记账。 当这个规则定下以后，这个系统中一定会出现一批人，他们开始竖着耳朵监听周围发出的声音，以抢占第一个记账的权利。比如概念 “比特币挖矿”。毕竟 1比特币=1K-nK美元。比特币挖矿机，就是用于赚取 比特币 的电脑，这类电脑一般有专业的挖矿芯片，多采用烧显卡的方式工作，耗电量较大。用户用个人计算机下载软件然后运行特定算法，与远方服务器通讯后可得到相应比特币，是获取比特币的方式之一。 “听谁的？” &emsp;&emsp;在这个系统中，如果我和另一个人C几乎同时地喊出一句：“为了艾泽拉斯！”。由于听众所处的位置不同，一定会有人先听到我说的那句话，而另外一些人则先听到C的那句话，如果我们规定只能有一个人说出这句话，那到底这句话是谁说的？ &emsp;&emsp;如果不加任何条件，那么上述的情况一定会这样发展：一部分人认为这句话是我说的，在听到这句话之后开始记账，之后他们所做的所有事情都是基于这个事实，并且随着这个信息一次次的传下去，这条信息链会越来越深；而另外一群认为是C先说这句话的人，也会按照这样的趋势发展。这样，原本是一条唯一的信息链，在我们喊出“为了艾泽拉斯”这句话之后，分叉了？ &emsp;&emsp;这会导致怎样的情况呢？按照我们的设想，应该每个人的小本本上记录的东西都是一样的，都是一条可以把所有信息串联起来的链条。但是在这一刻，他们小本本上记录的东西不一样了？以后还怎么确定交易和信息的真实性？ &emsp;&emsp;为了解决这个问题，又追加了新的规则，增加记录编码的难度，即比特币挖矿难度，保证记录的唯一性(保证节点之间的同步)。”不知道用唯一性是否准确？ 2. 区块链的应用&emsp;&emsp;区块链几乎可以应用到任何领域，在金融、物流、公共服务等领域都有大量案例。中国央行早在2016年就表态支持区块链。2016年11月，中国政府正式把区块链列入十三五规划纲要中。 &emsp;&emsp;比如贵州超过3000亿的脱贫脱贫攻坚基金，要通过300多个单位的运作，惠及493万贫困人口，如何确保扶贫资金募款，投资，使用管理等环节正确运作呢？区块链具有多方共识，交易溯源，不可篡改等技术特点，使它在确保信息可信、安全、可追溯等方面具有传统技术不可比拟的优势。以城市为单位，第一个发布区块链白皮书的就是贵阳市。 &emsp;&emsp;如果仔细观察，我们会发现马云最近两年在公共场所提及最多的概念便是信用体系。互联网在未来不会是创业主体，而是像空气一样成为我们生活的一部分。 &emsp;&emsp;蚂蚁金融便是马云最为看重的业务体系，在马云的构想下，未来人们的生活将无现金，并可以用信用兑换商品。这一实现，十分需要一种革命性的信用机制。这一机制在2016年的支付宝App里已经悄然 上线 – 蚂蚁区块链。 3. 从技术角度简单理解区块链(1) 区块链的本质 &emsp;&emsp;区块链是一种特殊的分布式数据库。 &emsp;&emsp;首先，区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，所以它是数据库。 &emsp;&emsp;其次，任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点(去中心化)，每个节点都是平等的，都保存着整个数据库。你可以向任何一个节点，写入/读取数据，因为所有节点最后都会同步，保证区块链一致。 (2) 区块链的最大特点 &emsp;&emsp;区块链没有管理员，它是彻底无中心的。其他的数据库都有管理员，但是区块链没有。如果有人想对区块链添加审核，也实现不了，因为它的设计目标就是防止出现居于中心地位的管理当局。 &emsp;&emsp;没有了管理员，人人都可以往里面写入数据，怎么才能保证数据是可信的呢，这就是区块链奇妙的地方。 (3) 区块 &emsp;&emsp;区块链由一个个相连的区块（block）组成。区块很像数据库的记录，每次写入数据，就是创建一个区块。 每个区块包含两个部分： 区块头（Head）：记录当前区块的元信息 区块体（Body）：实际数据 区块头包含了当前区块的多项元信息 生成时间 实际数据（即区块体）的 Hash 上一个区块的 Hash …… &emsp;&emsp;Hash 就是计算机可以对任意内容，计算出一个长度相同的特征值。区块链的 Hash 长度是256位，不管原始内容是什么，最后都会计算出一个256位的二进制数字。而且可以保证，只要原始内容不同，对应的 Hash 一定是不同的。 &emsp;&emsp;举例来说，字符串123的 Hash 是a8fdc205a9f19cc1c7507a60c4f01b13d11d7fd0（十六进制），转成二进制就是256位，而且只有123能得到这个 Hash。 (4) Hash 的不可修改性 &emsp;&emsp;区块与 Hash 是一一对应的，每个区块的 Hash 都是针对”区块头”（Head）计算的。 Hash = SHA256(区块头) &emsp;&emsp;区块头包含很多内容(包括上一个区块的Hash、当前区块体的Hash等，见上图)。这意味着，如果当前区块的内容变了，或者上一个区块的 Hash 变了，一定会引起当前区块的 Hash 改变。 &emsp;&emsp;如果有人修改了一个区块，该区块的 Hash 就变了。为了让后面的区块还能连到它，必须同时修改后面所有的区块，否则被改掉的区块就脱离区块链了。Hash 的计算很耗时，同时修改多个区块几乎不可能发生，除非有人掌握了全网51%以上的计算能力。 &emsp;&emsp;正是通过这种联动机制，区块链保证了自身的可靠性，数据一旦写入，就无法被篡改。这就像历史一样，发生了就是发生了，从此再无法改变。 (5) 采矿 &emsp;&emsp;由于必须保证节点之间的同步，所以新区块的添加速度不能太快。试想一下，你刚刚同步了一个区块，准备基于它生成下一个区块，但这时别的节点又有新区块生成，你不得不放弃做了一半的计算，再次去同步。因为每个区块的后面，只能跟着一个区块，你永远只能在最新区块的后面，生成下一个区块。所以，你别无选择，一听到信号，就必须立刻同步。 &emsp;&emsp;所以，区块链的发明者故意让添加新区块，变得很困难。他的设计是，平均每10分钟，全网才能生成一个新区块，一小时也就六个。 &emsp;&emsp;这种产出速度不是通过命令达成的，而是故意设置了海量的计算。也就是说，只有通过极其大量的计算，才能得到当前区块的有效 Hash，从而把新区块添加到区块链。由于计算量太大，所以快不起来。 &emsp;&emsp;这个过程就叫做采矿（mining），因为计算有效 Hash 的难度，好比在全世界的沙子里面，找到一粒符合条件的沙子。计算 Hash 的机器就叫做矿机，操作矿机的人就叫做矿工。 (6) 难度系数 &emsp;&emsp;你可能会有一个疑问，人们都说采矿很难，可是采矿不就是用计算机算出一个 Hash 吗，这正是计算机的强项啊，怎么会变得很难，迟迟算不出来呢？(比特币挖矿机，就是用于赚取比特币的电脑，一般有专业的挖矿芯片，多采用烧显卡的方式工作) &emsp;&emsp;原来不是任意一个 Hash 都可以，只有满足条件的 Hash 才会被区块链接受。这个条件特别苛刻，使得绝大部分 Hash 都不满足要求，必须重算。 &emsp;&emsp;区块头包含一个难度系数（difficulty）这个值决定了计算 Hash 的难度。举例来说，第100000个区块的难度系数是 14484.16236122。 &emsp;&emsp;区块链协议规定，使用一个常量除以难度系数，可以得到目标值（target）。显然，难度系数越大，目标值就越小。 &emsp;&emsp;Hash 的有效性跟目标值密切相关，只有小于目标值的 Hash 才是有效的，否则 Hash 无效，必须重算。由于目标值非常小，Hash 小于该值的机会极其渺茫，可能计算10亿次，才算中一次。这就是采矿如此之慢的根本原因。 &emsp;&emsp;区块头里面还有一个 Nonce 值，记录了 Hash 重算的次数。第 100000 个区块的 Nonce 值是 274148111，即计算了 2.74 亿次，才得到了一个有效的 Hash，该区块才能加入区块链。 (7) 难度系数的动态调节 &emsp;&emsp;就算采矿很难，但也没法保证，正好十分钟产出一个区块，有时一分钟就算出来了，有时几个小时可能也没结果。总体来看，随着硬件设备的提升，以及矿机的数量增长，计算速度一定会越来越快。 &emsp;&emsp;为了将产出速率恒定在十分钟，区块链发明者还设计了难度系数的动态调节机制。他规定，难度系数每两周（2016个区块）调整一次。如果这两周里面，区块的平均生成速度是9分钟，就意味着比法定速度快了10%，因此难度系数就要调高10%；如果平均生成速度是11分钟，就意味着比法定速度慢了10%，因此难度系数就要调低10%。 &emsp;&emsp;难度系数越调越高（目标值越来越小），导致了采矿越来越难。 (8)区块链的分叉 &emsp;&emsp;即使区块链是可靠的，现在还有一个问题没有解决：如果两个人同时向区块链写入数据，也就是说，同时有两个区块加入，因为它们都连着前一个区块，就形成了分叉。这时应该采纳哪一个区块呢？ &emsp;&emsp;现在的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。 &emsp;&emsp;现在的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。 &emsp;&emsp;为了保证数据的可靠性，区块链也有自己的代价。一是效率，数据写入区块链，最少要等待十分钟，所有节点都同步数，需要更多的时间；二是能耗，区块的生成需要矿工进行无数无意义的计算，这是非常耗费能源的。 感谢：公众号 Linux爱好者区块链是什么，如何简单易懂地介绍区块链？区块链，将如何重新定义世界 阅读原文]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VR 产业]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F26%2Fvrfirst%2F</url>
    <content type="text"><![CDATA[前言自2018年10月份“世界VR产业大会”在江西南昌召开后，我就越发觉得江西的发展不再沉默。 这可能是个机遇，是南昌的发展机遇，是江西省的发展机遇，更是落实到每个江西人的发展机遇，所以在2018年底考完研后更加对于创新创业有了更大胆的想法与动力。VR是未来科技的发展趋势，特别是随着人工智能、大数据的兴起，中国5G时代的领先与发展，使得虚拟现实，人机交互的升级更加突显未来科技既视感。目前的论坛已提到新零售、新制造，在影视内容、教育培训、文化旅游、新闻出版游戏（电竞）、动漫、投资、安防等行业都有进行研讨，而我关注的点在于体育产业与VR产业的结合，现在看来是还未涉及到的，不知道将来体育产业与VR产业会发生如何的碰撞。 然而我自己现在已在萌芽一个小想法 —— 拟态训练（自定义）。这是我个人目前对于体育产业与VR产业浅显的认知中能够设想到的一个结合物，该产物的目的有二：其一对于普通民众而言可以将科学的运动方式推广授之大众，其二则是对于专业运动员而言可以单独进行高水准的训练，是一种生理与心理的结合的高科技训练方式。这个难度可想而知是非常之大的，各方面的专业性得非常非常非常非常之强，可我深信这是未来科技的发展趋势，产品的拓展还是可以往其他行业延伸的，是具有弹性的。不过目前这些都是我的浅显认知得出的想法，也许以后在研究生阶段或工作思考的学习实践过程中会有在思想上的其他改变或者是更深的理解都说不定，不过我会在此行业一直奋力前行！ 下面我们来看看这两届 世界VR产业大会 的相关信息。 2018世界VR产业大会10月19日-21日，由工业和信息化部、江西省人民政府联合主办的2018世界VR产业大会（World Conference on VR Industry）在江西南昌成功举行。 2018世界VR产业大会 本届大会的主题是“VR让世界更精彩”，以互联网为核心的新一轮科技和产业革命蓄势待发, 人工智能、虚拟现实等新技术日新月异, 虚拟经济与实体经济的结合, 将给人们的生产方式和生活方式带来革命性变化我国已经把虚拟现实（VR）定位为超前发展的战略性新兴产业。 诺贝尔物理学奖得主乔治·斯穆特、阿里巴巴集团董事局主席马云以及来自国内外VR领域的领军人物、专家学者、企业高管、行业组织负责人以及国际组织代表共计2000多名嘉宾参会。据相关媒体报道，展会邀请到了国内外一些知名的VR/AR企业，例如百度、联想、华为、微软等等，其中，境外参展企业占总参展企业的18%左右。此外，VR/AR产品和应用展览会也将于大会期间对市民免费开放，展会现场将有158家企业展示其最新、最前沿的技术和产品。 2018世界VR产业大会现场 马云的精彩演讲现场实录各位朋友：大家上午好！ 在江西召开世界VR大会，我一开始还是很意外。我没有想到会在江西开世界非常前沿技术的大会，也没有想到，短短几年，江西在VR产业发展取得如此大的成绩，感慨江西在这个行业中不是依靠原有的资源，而是相信VR创造未来的资源。他的远见、决心、持久力让我感动。所以，江西今天已经在VR产业有一定的规模和影响力，我也相信今天的大会对世界VR产业与中国VR产业来讲，是一个里程碑式的大会。 但是，仔细想想也不意外，90年前，井冈山时期，江西由于这么一个地方，一个在大多数人都不相信的时候，选择相信未来。在大多数人怀疑的时候，拥抱了新的理念、新的思想，江西就是这样一个地方，江西拥抱新知识。我也相信今天的大会，标志着南昌正式向世界VR大会打响第一枪。 马云现场演讲 习总书记说井冈山精神就是坚定执着追理想，实事求是闯新路，艰苦奋斗攻难关，依靠群众求胜利，我觉得这四条在技术创新当中，同样有用，而且事实上如果分开了这四条，技术创新根本不可能。作为阿里巴巴的创始人，很多人只看到今天阿里巴巴取得的成绩，但没看到我们背后巨大的失败、巨大的挫折。我相信任何一个地区，任何一个行业要想取得成功，必须面向世界、面向全球，只有有理想、有远见、有人才、有执行力，才有可能实现自己的抱负。 过去几个月，我和刘书记见了三次，感叹江西的进取思想、对未来的担当。所以我们决定在很短的时间内，认真地研究、考察，把江西作为阿里巴巴创新与科技、产品和服务最重要的发展事业中心。 有人问我为什么是江西，我说为什么不是江西？宋朝、明朝以来，江西盛产文人。昨天晚上还听说，明朝的内阁，朝堂上有一半的官员是江西人。江西盛产读书人，名人辈出。江西景德镇是文化创意产业的鼻祖，没有创意创新，谁也想象不了今天江西能够创造出让全世界都来买的瓷器，China，瓷器在江西。除此以外，更重要的是江西有远见、有行动力。短短几个月，我们切身感受到江西的执行力，江西对老百姓的担当，对未来的担当。在几个月以内，江西已经形成了有移动政务、移动办事，刷手机坐公交，城市大脑迅速接轨，让我们对江西充满信心。 有人说江西没有VR人才，谈什么VR，我自己也这么觉得，世界上本来就没有什么VR人才，我们的世界并没有专家。所有的专家都是昨天的专家，未来的专家，今天的江西是在未来打造VR的专家。所以当年我们在贵州的时候说，贵州为什么可以发展大数据，贵州没有大数据人才。我说北京、上海、纽约、东京也没有大数据人才，这如果都有了，那还需要我们创业者干什么？一切条件都完美，就不需要创业者。如果钱能解决问题，银行可以做一切事情。这个世界因为有想象，因为有理想，因为你对未来有担当，你对未来敢于做执行力，敢于行动才有真正的未来。 所以，我相信每一次技术革命，大约都是50年，前20年是技术的变化，后30年才是应用的变革。未来世界上数据是重要的生产资料，计算是生产力，而互联网是生产关系，技术将给社会带来翻天覆地的变化，深入到社会的方方面面。我相信这些话过去十年无数人听过了很多遍，但是很少有人真正的去理解它，改变自己。所以技术将会改革传播的零售业、制造业，改变教育、医疗，改变我们认识和思考世界的方式。 我想，我们讲人工智能可能会取代我们很多工作，这不是可能，这是一定。所以我们讲改变教育，改变自己的思考方式，如果我们依然按照昨天的教育方式，按照昨天的思考方式，我想我们的孩子肯定做不了比科技更加重要的事情，不被机器所淘汰。 所以，因为技术的发展，人类如果能够到达过去很多到达不了的地方，看见过去看不到的东西，听到过去听不到的东西，而VR技术让人类又往前了，进入到不可能当中去，这是一项了不起的技术。刚才苗部长讲了VR技术对整个生产、制造、社会、音乐、人的生活会产生巨大的影响，我们是坚信不移。VR技术，物联网等，这都是技术革命的重要组成部分。 VR这个行业，20年以前，有些地方进行了深入的研究。我自己认为，我们对VR非常关注，在全世界都看到有这样和那样的公司，零星散落在世界各地，但是把一个地方打造成VR的创新创业中心，把VR的产业中心，甚至作为一个平台来打造，江西南昌是第一次。VR必须要到大数据、云计算、人工智能的创新以后，VR才属于真正未来的技术。所以20年以前是纯VR，现在的VR必须跟大数据、人工智能结合起来。不跟大数据、互联网、人工智能技术相结合，VR产品可能还是一个新奇、有趣的应用。就像摄像头，如果不跟互联网结合，那只是一个罚款工具。但是连上网以后，接上了计算能力，就可以用来解决交通拥堵的问题，只有和互联网、大数据、云计算结合，VR才能从一个玩具真正变成解决核心技术的内容。特别是改变教育、改变医疗，我们充满了期待。 虚拟现实千万不能真的变成一个虚的产业，VR行业要和实体经济紧密结合，也只有紧密结合实体经济，VR才有真正的未来。虚的技术一定要做实，而实的产业必须要学会虚。数据时代，无论是VR技术，还是AR，区块链等技术，这些技术再先进、再流行，风投资本再喜欢，但是如果不能和制造业、服务业相结合，不能推进转型升级，不能推进社会向更加绿色，更加可持续，更加普惠的发展，不能让人们的生活更加健康、更加快乐，这样的技术就变得毫无意义，也不可能有广阔的前景。 最近，风险投资的热潮正在退潮，我听说很多创业的公司估值少了70%，我觉得这剩下的30%才是真正符合自己的价值。阿里巴巴创业的时候，能融到500万美元，绝对已经是巨资了，今天融到1亿美金都觉得自己不好意思跟人家说。所以，今天风险投资热度退却，我觉得对整个产业应该是好事情。现在是见真金、真本事、真技术的时候。今天江西打造一个如此有远见、有担当、有未来、下决心真干的VR产业中心，我觉得对每一个有志于此类的企业家、创业者来讲都是利好消息。离开互联网的实体经济没有未来，我经常听人说实体制造业不行了，其实不是制造业不行，是落后的制造业不行。不是别人的制造业不行，是你的制造业不行。未来制造业不仅仅是制造业，而是和互联网完美结合。制造背后的服务和体验，是创造思想，是体验，是感受以及服务能力，这也是未来VR产业的核心竞争力，看不到背后的创造思想，创新的体验，精致的感受。 阿里巴巴投资了非常领先的一项VR技术，就在两个月以前，这个公司花了八年时间，才发布了他的第一个VR眼镜，而且这个产品离当时投资者的预期还是相当大。但是这很正常，很多时候看不清楚才是真正的未来，阿里巴巴今天大家都相信电子商务，但是19年以前的电子商务，跟今天完全不是这么一回事。10年以后的电子商务，跟今天也不是一回事，过去的19年，我们至少有过190次以上的电子商务的变革，1900次以上的失败，19000次以上的失业才有今天。所以我们一定要相信，我们在这一次，从VR的投资里深刻明白，技术的创新充满曲折和艰难。如果轻而易举就能成功，那一定不是什么了不起的技术。投入的时候，就要有挫折的准备，就要有失败的思想准备，技术创新就是要做好失败的准备来追求成功。 任何新生事物，就像新生儿一样，刚出生的时候其实都不好看，我自己觉得，有人讲孩子生下来像爹妈，我看起来都像老鼠，都很难看，但是养着养着，把心血花下去就很好看。所以这些新生事物，让我们对未来充满着想象，充满着希望，它因为有无限的可能性。所以我们希望给它时间，给它相信，给它以坚持，在人人都相信一个产业的时候，其实你已经没有机会了。在没有人相信的时候，你的坚持才是真正的尊贵。很多人是因为看见而相信，只有很少数的人是因为相信而看见。谈创新、谈技术其实很容易，真正做创新、促创新其实很难，创新一定要预防叶公好龙，特别是现在我们人人在做创新，创新一定会有挑战传统的思想、传统的产业、传统的行业、传统很多的既得利益群体，我们每个人要敢于为创新说话，为创新担当。也只有这样，创新才有机会升级。创新不仅仅是科学家、技术人员的挑战，也不仅仅是是技术的挑战，同时是政府运营的巨大挑战。我们都知道要把一个行业打掉是非常容易的事情，但是要把行业做完善、做持久非常之艰难。 江西拥抱VR产业，实际上是拥抱整个技术。我个人觉得，江西最宝贵的还不是VR产业本身，而是江西背后的变革，江西面向未来的思想。我一直相信换道超车，只有在另外一个道上，只有拼未来，不是拼我们昨天的资源，才能真正超越。到了江西以后，我明显感觉到人们的生活最近在发生很大的变化，行动在发生变化。我相信有思想引领，江西的未来一定发生深刻的变化，并且也一直相信互联网时代基础设施越薄弱的地方越容易成功，这跟当年革命一样，革命最薄弱的地方，往往有机会发展起来，我相信任何人都在讲我有什么的时候，他其实缺乏了他没有的东西，那就是创新的能力，对未来的担当。江西今天真正靠的不是传统的资源，靠的是创新创意，靠的是思想，靠的是对未来的担当，对人民的担当，对一切所有我们不敢相信，但是敢于去尝试这样的担当。所以谢谢大家！我相信今天的会议，对中国乃至世界VR所产生的重要和深远的影响，我为今天能够参加这样的大会深感骄傲。相信20年以后的江西，我们会为今天而兴奋，而骄傲，谢谢大家！ 诺贝尔物理学奖得主、美国科学院院士乔治·斯穆特：VR将改变多个行业乔治·斯穆特 10月19日，由工业和信息化部、江西省人民政府联合主办，中国电子信息产业发展 研究院、江西省工业和信息化委员会、南昌市人民政府、虚拟现实产业联盟承办的 2018世界VR产业大会在江西南昌隆重开幕。为期三天的本次大会以“VR让世界更精彩”为主题，汇聚了来自20多个国家和地区的1000多家企业，展示了全球虚拟现实 领域最新研究成果。诺贝尔物理学奖得主、美国科学院院士乔治·斯穆特在19日上午的主旨演讲中表示：“VR将改变三个行业——地产、游戏和旅游。可能还有两个会受到VR影响的，就是学习和教育，系列的研究表明基于VR的学习非常有效而且非常高效。当普通用户都能够负担得起，VR的内容渲染和深层应用更真实，VR将真正变成主流。” VR将改变多个行业 乔治·斯穆特说，VR在深远地改变我们的世界，VR、AR代表的是人、知识、体验以及内容之间的交互，可能有些界面过去和人并没有实现交互，现在通过一系列的系统来实现这样的交互。而且VR会影响很多行业，也会不断造就很多行业。 整个虚拟现实的崛起，即将彻底改变以下三个行业：第一是地产行业，这甚至是我没有想到的，过去很难想象，基于VR设计能够改变地产；第二是游戏；第三是旅游出行行业。还有两个会受到VR影响，就是学习和教育，在一系列的研究中我们发现基于VR的学习是非常有效、非常高效的，而且会影响很多的消费者。现在VR内容还处于“暖身”阶段，当普通用户都能够负担得起，在未来内容的渲染和深层应用体验更真实时，VR会真正变成主流。此外，VR也会影响消费领域，现在在线上下单，通过VR\AR能够非常真实、逼真地感受到要买的那款产品。在这些领域，VR都将大行其道。 乔治·斯穆特说，在这些应用之外，我有自己不同的想法。首先在制造业，VR\AR会渗透影响，未来自动化程度越来越高，工业4.0时代能够让产品更高效地做多批次、小型化产品，并且能够在客户和设计师之间建立起联系，用户告诉设计师喜欢什么样的产品。 在颠覆性技术中发挥VR作用 麦肯锡认为在未来经济中起到颠覆性作用的科技中，排名第一的是移动互联网，移动互联网越来越普及，随着5G时代的到来还将发生新的变化。移动互联网有巨大的潜力可以进一步释放，移动互联网结合VR技术，能够更好地管理个人健康，例如通过远程健康监测可以降低10%~20%的慢性疾病的治疗费用。 排名第二的是知识工作自动化，到2025年会有5.2到6.7万亿美元的商业潜力。在制造业实现自动化的同时，一些智力工作也开始自动化，如语音识别技术。知识工作自动化影响的人群将达到1.1~1.4亿人，在这类应用中，如谷歌开始研发的无人汽车、自动驾驶技术，亚马逊、阿里巴巴推出的无人超市。在这类应用中，AR都有用武之地，例如消费者在超市中可以使用AR技术进行购物；也可以利用AR提高安全性，用于能源监测。在是教育行业，虚拟现实已经切切实实在其中发挥作用。学生可以通过AR与虚拟的人工智能的教师进行对话，可以针对一个学生提供一对一的辅导。 排名第三的领域是物联网，现在越来越多的设备使用传感器。例如很多门铃是视频的，整个视频系统可以和敲门的人进行简单对话交流。这也可以通过AR系统来对接，以多媒体的方式进行控制，从而使信息可以更好地交换。 第四名是云计算。云计算可以提供更强大的计算能力，采用AR可以显示不同类型的信息，例如一个屏幕显示视频，另一屏幕显示相关的信息，这些不同信息汇集，其实可以应用在移动办公中。 AR和VR技术已经成为引人入胜的技术，我们看到，它可以用到很多领域，让我们感到非常的振奋。 信息来源：2018世界VR产业大会网 2019世界VR产业大会2019世界VR产业大会 大会背景习近平总书记在致2018世界VR产业大会的贺信中指出，新一轮科技革命和产业变革正在蓬勃发展，虚拟现实技术逐步走向成熟，拓展了人类感知能力，改变了产品形态和服务模式。中国正致力于实现高质量发展，推动新技术、新产品、新业态、新模式在各领域广泛应用。中国愿加强虚拟现实等领域国际交流合作，共享发展机遇，共享创新成果，努力开创人类社会更加智慧、更加美好的未来。 近年来，我国虚拟现实产业逐步走向成熟，消费市场和行业应用市场不断打开，产业链条更加完善。5G商用将大大提升虚拟现实体验，为虚拟现实技术在更广泛领域的应用开辟新天地。我国在硬件制造、内容应用开发以及业务体验推广等产业链各环节快速发展，正在成为全球虚拟现实产业创新创业活力最强、市场接受度最高、发展潜力最大的地区之一。 大会宗旨聚焦前沿技术，探讨发展之道，展示最新成果，推动应用普及，搭建交流平台，汇聚要素资源，让大会成为全世界了解中国虚拟现实产业发展的窗口和引领全球虚拟现实产业发展的风向标，吸引优秀企业和项目在江西落地，培育经济增长新动能。 大会目的贯彻落实习近平总书记贺信及视察江西时的重要讲话精神，把握5G商用元年的重大历史机遇，紧密结合当前5G赋能VR产业发展的特点，探讨5G新时代如何赋予VR更稳定的技术支撑、更广泛的应用场景、更丰富的体验效果。 大会主题VR让世界更精彩 —— VR+5G 开启感知新时代。 VR+5G 重大新闻 2023年南昌要成世界级VR中心：原文传送门 项目落地开花 南昌VR点燃发展动力引擎：原文传送门 了解更多：2019世界VR产业大会网 最后我自己是已经在官网报名了大会观众参与了四个论坛，还在审核阶段，希望能够通过这一次学习成长的机会让我慢慢融入到该行业领域中，让自己未来能够走得更长远，一望无垠才有无限可能！期待2019年的世界VR产业大会，也荣幸自己即将成为与会的一份子，更期盼自己将来不仅仅当作与会观众。。。 参与论坛 电子票 我相信：未来江西的发展是 VR + 5G + AI + 大数据 的结合引领着，愿江西发展不再沉默！]]></content>
      <categories>
        <category>VR</category>
      </categories>
      <tags>
        <tag>VR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 协作开发]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F25%2Fcooperation%2F</url>
    <content type="text"><![CDATA[fork项目，参与开发，fork后会在你的主页建立一个同名仓库； git clone 你fork的仓库地址 到本地； 修改本地文件 commit，push； pr： 自己开始也是这样的，但是后面如果作者更新了，你这边还是原来的代码的话就跟不上进度，所以必须要同步其他人的进度； git remote add upstream： 你fork项目的原始地址（作用是保存项目地址通过 upstream 来代替，不需要每次都输入这个地址）； git pull upstream： 分支名（拉取项目的最新代码到本地，保持同步）； 编辑你自己的代码， commit， push； 如果你需要合并自己的commit记录，可以使用 git rebase -i head~3（最近3次的提交记录）； 按i进入插入模式然后可以根据提示编写commit，然后esc退出模式再按 :wq 退出保存； git push –force： 提交代码； 可以安安心心的 pr了，然后等着 merge 或者 rebase。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F24%2Fwebpack%2F</url>
    <content type="text"><![CDATA[常用的webpack插件html-webpack-plugin 可以指定 template 模板文件，将会在 output 目录下，生成 html 文件，并引入打包后的 js.安装依赖:npm install –save-dev html-webpack-plugin 支持加载css文件通过使用不同的 style-loader 和 css-loader, 可以将 css 文件转换成 js 文件类型。安装依赖:npm install –save-dev style-loader css-loader 支持加载图片file-loader: 解决 css 等文件中的引入图片路径问题url-loader: 当图片小于 limit 的时候会把图片 Base64编码，大于 limit 参数的时候还是使用 file-loader 进行拷贝如果希望图片存放在单独的目录下，那么需要指定outputPath安装依赖:npm install –save-dev url-loader file-loader 支持编译less和sass有些前端同事可能习惯于使用 less 或者是 sass 编写 css，那么也需要在 webpack 中进行配置。安装对应的依赖:npm install –save-dev less less-loadernpm install –save-dev node-sass sass-loader 支持转义 ES6/ES7/JSXES6/ES7/JSX 转义需要 Babel 的依赖，支持装饰器。安装对应的依赖:npm install –save-dev @babel/core babel-loader @babel/preset-env @babel/preset-react @babel/plugin-proposal-decorators @babel/plugin-proposal-object-rest-spread .压缩JS文件安装依赖:npm install –save-dev uglifyjs-webpack-pluginnpm install –save-dev optimize-css-assets-webpack-plugin 分离CSS(如果CSS文件较大的话)因为 css 的下载和 js 可以并行，当一个 HTML 文件很大的时候，可以把 css 单独提取出来加载npm install –save-dev mini-css-extract-plugin .压缩CSS文件安装依赖:npm install –save-dev optimize-css-assets-webpack-plugin 打包前先清空输出目录npm install –save-dev clean-webpack-plugin 配置 webpack-dev-serverwebpack-dev-server 提供了一个简单的 Web服务器和实时热更新的能力安装依赖:npm install –save-dev webpack-dev-server 详情查看：webpack 中文网]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 数据类型]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F23%2FjsType%2F</url>
    <content type="text"><![CDATA[JavaScript 是一种弱类型语言，下面是两是种常见的分类方式。 一、第一种分类方式（常用分法）分为9种类型：分别是 Undefined，Boolean，Object，Number，Null，String，Reference，List，Completion，其中Reference，List，Completion 三种类型仅共语言解析运行时使用，无法从程序中直接访问。 1、Undefined 类型： 是全局对象 window 的一个特殊属性，顾名思义就是未定义的意思；Undefined 类型只有一个值 Undefined，表示一个变量定义了但未赋值。 如：var a; alert(a); // 弹出undefined； 下面是几种常见的会出现undefined的情况： （1）获取一个对象的属性（原本属性和 protoType 扩展的属性）不存在时，返回 undefined； （2）当一个函数 function(){} 没有明确的返回值时，显示 undefined； 如：function way(){} alert(way()); // 弹出 undefined （3）JavaScript 中的参数有多个形参的话，若果调用参数的话，参数数量小于形参数量，那么其他的参数值就为 undefined。 2、Null类型： null 是 JavaScript 保留的关键字，null 类型也只有一个 null 值，表示为空或者不存在的对象引用： （1）JavaScript 中的if() 判断语句无论是 null 类型还是 undefined 类型他们的返回值都是 false，也就是说一个变量若是 null 或者 undefined 那么他就为 false。 12345678910if (null) &#123; alert("sdf");//进入不了&#125;if (undefined) &#123; alert("sdfsdf");//进入不了&#125;var a=12;if (a) &#123; alert("sdf"); //能进入&#125; 3、Number类型： 表示数值，包含了所有的数值类型，不像高级语言那么细分成 int，double，deciable，他的取值范围是：1.7976931348623157E+308 到 -1.7976931348623157E+308之间，就是1.797693134862315710 的308次方 到 -1.797693134862315710 的308次方之间；Number 类型有一个特殊的值 NaN，他是 Number 类型中一个非数值的值，就像无穷大，所以NaN不等于 NaN。 4、Object类型： 用来表示一个对象，像String， Array，new 一个对象等，当这个对象为空时，就是 null了；所以 alert(typeof(null)) 的弹出值为object。 5、String类型： string类型是 JavaScript 中的一个比较重要的类型，它用来表示一个字符串，我们在写脚本的时候需要处理很多的字符串，所以 JavaScript 库中也提供了很多字符串处理方法。 6、Boolean类型： 布尔类型大家都很熟悉，这里说几个他的特殊用法： （1）boolea类型和Number类型相结合时，true转化为1，false转化为0； 1234var a = true; alert(a+1);//弹出2var a = true; alert(a);//弹出true 上述六种类型也可以相互转化，基本上是数值和字符串和布尔值之间的转化： （1）Number类型转化为string类型，用tostring()； （2）String类型转化为Number，用Number()； 1234var str = "123";var num = 1;alert(str + num); // 弹出1231alert(Number(str) + num); // 弹出124 也可以使用全局函数 parseInt() 和 parseFloat() 来进行转换；parseInt() 和 parseFloat() 的区别是 Number() 转换是整个值，而 parseInt() 和 parseFloat() 则可以只转换开头的数字部分。 12345alert(Number("123asdf")); // 弹出NaNalert(Number("1.2.3")); // 弹出NaNalert(parseInt("123sdf")); // 弹出123alert(parseFloat("sdfsdf")); // 弹出NaNalert(parseInt("sdf345")); // 弹出NaN Number() 在转化的过程中布尔类型的 true 和 false 分别被转化为1和0其他的不能转化为数值的全部转化NaN。 123alert(Number(true));//弹出1alert(Number(false));//弹出0alert(Number(null));//弹出0 其他的若是不能转化为数值类型的，基本上全转化为 NaN。 扩展小知识： （1）判断一个变量是否是数值，用IsNan() 方法； （2）在 JavaScript 中 “==” 和 “===” 的区别: “==” 只要求值相等; “===” 要求值和类型都相等； （3）instanceof 只是用于判断 object 是否是 class类的一个实例，是的话返回 true,否则返回 false；alert(“a instanceof String”); 二、第二种分类方法（typeof()关键字）：分为：undefined，number，string，boolean，object，function 类型 例子 运行结果 Undefined var a1; alert(typeof(a1))；function way{} alert(way()); alert(typeof(way())) undefined number Var num1=12; alert(typeof(num1)); number string Var num2=”12”; alert(typeof(num2)); string boolean Var flag=true; alert(typeof(flag)); boolean object Var str=new string(); alert(typeof(str));Var a=null; alert(typeof(a)); object function alert(typeof(String)); function]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心得篇]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F22%2FThinking%2F</url>
    <content type="text"><![CDATA[输入密码 ❤ 查看文章 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[懒加载]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F21%2Flazy-load%2F</url>
    <content type="text"><![CDATA[html 代码段： 123456789101112131415&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt;&lt;img class="imgLazyLoad" data-src="https://avatars0.githubusercontent.com/u/40397349?s=460&amp;v=4" /&gt;&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt; data-src属性上面保存着我们后面需要动态加载的图片地址。 JavaScript 代码段： 12345678910111213141516171819202122232425262728(function()&#123;//立即执行函数 let imgList = [],delay,time = 250,offset = 0; function _delay()&#123;//函数防抖 clearTimeout(delay); delay = setTimeout(() =&gt; &#123; _loadImg(); &#125;,time) &#125;; function _loadImg()&#123;//执行图片加载 for(let i = 0 ; i &lt; imgList.length; i++)&#123; if(_isShow(imgList[i]))&#123; imgList[i].src = imgList[i].getAttribute('data-src'); imgList.splice(i,1); &#125; &#125; &#125;; function _isShow(el)&#123;//判断img是否出现在可视窗口 let coords = el.getBoundingClientRect(); return (coords.left &gt;= 0 &amp;&amp; coords.left &gt;= 0 &amp;&amp; coords.top) &lt;= (document.documentElement.clientHeight || window.innerHeight) + parseInt(offset); &#125;; function imgLoad(selector)&#123;//获取所有需要实现懒加载图片对象引用并设置window监听事件scroll _selector = selector || '.imgLazyLoad'; let nodes = document.querySelectorAll(selector); imgList = Array.apply(null,nodes); window.addEventListener('scroll',_delay,false) &#125;; imgLoad('.imgLazyLoad')&#125;)()]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[节流]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F20%2Fthrottle%2F</url>
    <content type="text"><![CDATA[throttle 的中心思想在于：在某段时间内，不管你触发了多少次回调，我都只认第一次，并在计时结束时给予响应。 先给大家讲个小故事：现在有一个旅客刚下了飞机，需要用车，于是打电话叫了该机场唯一的一辆机场大巴来接。司机开到机场，心想来都来了，多接几个人一起走吧，这样这趟才跑得值——我等个十分钟看看。于是司机一边打开了计时器，一边招呼后面的客人陆陆续续上车。在这十分钟内，后面下飞机的乘客都只能乘这一辆大巴，十分钟过去后，不管后面还有多少没挤上车的乘客，这班车都必须发走。 在这个故事里，“司机” 就是我们的节流阀，他控制发车的时机；“乘客”就是因为我们频繁操作事件而不断涌入的回调任务，它需要接受“司机”的安排；而“计时器”，就是我们上文提到的以自由变量形式存在的时间信息，它是“司机”决定发车的依据；最后“发车”这个动作，就对应到回调函数的执行。 总结下来，所谓的“节流”，是通过在一段时间内无视后来产生的回调请求来实现的。只要一位客人叫了车，司机就会为他开启计时器，一定的时间内，后面需要乘车的客人都得排队上这一辆车，谁也无法叫到更多的车。 对应到实际的交互上是一样一样的：每当用户触发了一次 scroll 事件，我们就为这个触发操作开启计时器。一段时间内，后续所有的 scroll 事件都会被当作“一辆车的乘客”——它们无法触发新的 scroll 回调。直到“一段时间”到了，第一次触发的 scroll 事件对应的回调才会执行，而“一段时间内”触发的后续的 scroll 回调都会被节流阀无视掉。 理解了大致的思路，我们现在一起实现一个 throttle： // fn是我们要包装的回调函数事件，Interval是我们要传入的时间间隔function throttle(fn, Interval) {// 记录上一次调用的时间；let last = 0;return function() {// 保存上下文的thislet context = this// 保存传入的参数let args = arguments;// 保存调用时的时间;let now = + new Date;// 判断上一次调用时间和当前调用时间对比if (now - last &gt; Interval) {// 更新最后一次调用时间;last = now;fn.apply(context, args);}}}// 用throttle来包装scroll的回调let better_scroll = throttle(() =&gt; {console.log(‘触发了滚动事件’), 1000});document.addEventListener(‘scroll’, better_scroll);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[防抖]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F20%2Fdebounce%2F</url>
    <content type="text"><![CDATA[防抖的中心思想在于：我会等你到底。在某段时间内，不管你触发了多少次回调，我都只认最后一次。 继续讲司机开车的故事。这次的司机比较有耐心。第一个乘客上车后，司机开始计时（比如说十分钟）。十分钟之内，如果又上来了一个乘客，司机会把计时器清零，重新开始等另一个十分钟（延迟了等待）。直到有这么一位乘客，从他上车开始，后续十分钟都没有新乘客上车，司机会认为确实没有人需要搭这趟车了，才会把车开走。 我们对比 throttle 来理解 debounce：在throttle的逻辑里，“第一个人说了算”，它只为第一个乘客计时，时间到了就执行回调。而 debounce 认为，“最后一个人说了算”，debounce 会为每一个新乘客设定新的定时器。 我们基于上面的理解，一起来写一个 debounce： // fn是我们要包装的回调函数事件，delay每次等待都执行时间function debounce(fn, delay) {// 定时器；let timer = null; 1234567891011121314return function() &#123; // 保存上下文的this let context = this // 保存传入的参数 let args = arguments; // 每次调用前都清空定时器 if (timer) &#123; clearTimeout(timer) &#125; // 去设立一个新的定时器 timer = setTimeout (function() &#123; fn.apply(context, args); &#125;, delay)&#125; }// 用throttle来包装scroll的回调let better_scroll = debounce(() =&gt; {console.log(‘触发了滚动事件’), 1000});document.addEventListener(‘scroll’, better_scroll);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言中的++ 你了解吗？]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F19%2Fself-increase%2F</url>
    <content type="text"><![CDATA[前言今天朋友问了我个C语言的问题，信誓旦旦给了答案后，在我的 Visual C++ 6.0 上运行的答案却不一，题目如下： 首先明白 ++在前和++在后的区别：++在前 先自加后运算，++在后 先运算后自加。该题我给出的答案是15，21，8，8，我的编译器给出的答案是15，22，8，8，另外有些地方又说答案是15，24，8，8（这下更是一脸懵B） 查阅资料后发现这是个问题，所以发篇博文收录一下，不过网上已经有很多总结归纳的不错的博文了，我这里就选择一篇供参考，让我们看看博友 lulubaby_ 比较nice的解释： 首先解释p的值吧。是不是很多在学习C语言的小伙伴觉得p应该等于18呢？ 第一种：p = 15 在vc环境下p的值为15，那么只可能有一种解释： p = 5 + 5 + 5 = 15 在 VC6.0环境 中，第一个子表达式i++求完值后，其它子表达式中出现的变量i的值还没有改变，依然是5。表达式(i++) + (i++) + (i++)的值为15（5+5+5），求完值后，变量i会执行自增操作3次，其值会变成8。所以最终的结果为15和8。 第二种：p = 18 在 gcc和dev c++环境 下p的值为18，不难理解： p = 5 + 6 + 7 = 18 由于”i++”是先加后自增，所以是从5开始边加边自增，最终的结果为18和8。 严格意义上来说，这个表达式不“合法”。严格地说C语言程序中不能出现类似的表达式，它是非法的，虽然它能通过编译系统的检查并也能输出一个结果。 再来解释下q值q的值为什么是22（TC环境下是24（8+8+8））？ 用VC中的debug反汇编：q=(++j)+(++j)+(++j);0040102F mov eax,dword ptr [ebp-4] //把ｊ的值传到寄存器EAX，dword ptr [ebp-4]存放的是变量ｊ00401032 add eax,1 //EAX加１00401035 mov dword ptr [ebp-4],eax //EAX的值传到变量ｊ，这两步实现第一个++j，此时ｊ＝６00401038 mov ecx,dword ptr [ebp-4] //把ｊ的值传到寄存器ECX0040103B add ecx,1 //ECX加１0040103E mov dword ptr [ebp-4],ecx //ECX的值传到变量ｊ，这两步实现第二个++j，此时ｊ＝７00401041 mov edx,dword ptr [ebp-4] //把变量ｊ传到EDX00401044 add edx,dword ptr [ebp-4] //再加上ｊ的值，这一步实现了第一个加号的加法运算，内存中ｊ变量的值仍是７00401047 mov eax,dword ptr [ebp-4] //把ｊ的值传到寄存器EAX0040104A add eax,1 //EAX加１0040104D mov dword ptr [ebp-4],eax //把EAX的值传送到变量ｊ中，此时，变量ｊ在内存中的值是８00401050 add edx,dword ptr [ebp-4] //EDX加上ｊ的值，EDX中存放的是前面的第一个加法运算的结果１４，最后EDX的值为２２00401053 mov dword ptr [ebp-8],edx //把运算结果传到内存中变量ｑ的地方，所以最后变量ｑ为２２ 可能有很多小白看不太懂上述的解释 q = 7 + 7 + 8 = 22 C语言的深水在这里就可以体现了，在C语言中，加法从左到右运算,先算前两个加数的和，再和第三个相加的过程中，他会先把前两个括号内的东西执行完成后，再执行括号外的加法，也就是（7+7）+8=22。如果是4个++j连续的话，结果就应该是 7+7+9+9=32 。 亲爱的你们懂了吗？ ps:php中，测试下述代码（结果是：18，21，8，8）： 12345678910&lt;?php $a = 5; $b = 5; $p = ($a++)+($a++)+($a++); $q = (++$b)+(++$b)+(++$b); echo $p; echo $q; echo $a; echo $b;?&gt; 得到的18和8我就不多说了，21也是比较符合我们正常思路的6+7+8。 而在python,go,以及ruby中，没有自增运算符，这样也就大大减少了这种因版本和编译器的差异导致运行结果不同的概率。 本文摘转自 lulubaby_ 博文 —— 原文传送门]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git rebase 与 git merge 的区别]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F18%2Fgit-01%2F</url>
    <content type="text"><![CDATA[前言初学git，在合并分支上必定会常用到 git merge 语法。今日接触到 git rebase，发现二者都有用于分支合并的功能，那接下来让我们探究一下二者的不同之处。 First：二者的区别主要区别在于git log上：是否保留分支的commit提交节点 。 Than：详情分析前提： 在一个git项目中我先创建并保存了两个文档：1.txt 和 2.txt 记作“1” 和 “2”； 创建分支branch1； 继续在主分支Master上创建并保存两个文档：3.txt 和 4.txt 记作“3” 和 “4”； 转到branch1分支上创建 5.txt 和 6.txt 记作“5” 和 “6”； 此时，我们的主分支Master上有1、2、3、4 四个文档，branch1分支上则是1、2、5、6 四个文档，接下来执行我们的合并操作。 git merge： 我们直接回到主分支Master上执行 git merge 命令，显示如下： 此时我们的 git log 上保留了分支branch1的 5 和 6 的commit提交，且又在主分支Master上自动创建了一个新的commit提交节点 “7”。 简单而言就是Master的1、2、3、4和合并的branch1的5、6的提交过程都被记录下来了，且自动在Master上自动生成第7个节点： git rebase： 我们在分支branch1上执行 git rebase 命令：会发现branch1合并了 Master 的 3、4 文档，所以现在branch1 就有了1、2、3、4、5、6所有文档，回到Master再合并一下：这时我们的 git log 上就得到一个简洁的项目历史，且未生成新的 merge commit（保留了分支上的提交信息成功与Master合并，但删去了提交历史记录）： 自我猜想： 学完rebase，我即刻猜想，若是在分支baranch1上直接merge合并主分支，得到所有文档后再回到主分支上执行merge会不会也能得到一条线，事实证明，这么想说明还是没有完全理解rebase的真正含义，先看结果吧… SO（敲黑板）今日学习： rebase 到底是什么？ rebase就是——变基， 变基， 变基 。 即：改变一条分支的 基点 ，使原分支从指定的节点（commit）延续。。 通俗点讲，变基操作其实就是保留了该 commit 作出的修改，但删丢弃了分支上一些现有的提交记录，删去了这些节点。 Last：二者比较 比较 merge rebase 优点 保留有价值的历史文档 删减就繁 缺点 分支杂乱冗余 无法体现时间线 所以，使用merge还是rebase还是得分情况考虑，具体项目具体分析： 如果项目庞大，需要一个简洁的线性历史树便于leader管理，推荐使用 git rebase 。 如果是小型项目，需要审查历史纪录来便于编写过程报告，则推荐使用 git merge 。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何快速看懂“商业模式”？ [收藏]]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F17%2FbusiModle%2F</url>
    <content type="text"><![CDATA[前言 什么是商业模式？商业模式中最重要的部分是什么？以及其对商业模式的看法 互联网公司的业务最重要的就是“流量”和“商业模式”。流量往往是商业模式产生的前提，因为有了流量才有客户愿意和项目合作。 但往往创业项目就比较悲催了，还是一个商业计划书的“画饼”阶段，哪里有什么流量，这个时候完全是靠商业模式撑着，甚至在初创型互联网之中，商业模式的构架能力甚至超过了流量（资源）的重要性。 ★ 而什么是商业模式呢？ 一、商业模式=盈利模式+服务模式+组织模式商业模式应该包括三个层次： 第一个层面回答项目如何赚钱，也就是所谓“盈利模式”；第二层面是回答靠什么样的方式去服务用户，那就是“服务模式”；第三个层面是如何聚集起自己的用户，怎么把规模搞大，也就是“组织模式”。从这三方面考察商业模式，这相当于是项目的“中心思想”。 如果是一个很成熟的产品，其产品逻辑和设计一定是服从于商业模式才是合格的，反之如果产品还没有成型，也可以根据商业模式来推导出产品的逻辑和一些功能设计的，基于商业模式的预测和推敲往往不会离谱，“万变不离其宗”。 盈利模式其实很好讲清楚，那就是公司账上的钱从哪里来作为判断依据，从企业客户里收来的就是to B，从终端消费者口袋里收上来的就是to C。 以“华为”举例说明： 任正非说“客户是公司创造财富的源头”，华为的客户有哪些？ 华为在做手机（to C）之前，他们的客户主要来自企业（那时候华为主要还是一家to B的公司）；现在全球社会面临5G升级，其客户扩大至一个个政府组织，也有所谓的“to G”；而华为最让美国人忌惮的是这家公司不走资本路线，不上市不融资，觉得不好操控是一个“异类”。 而大多数公司尤其是互联网公司的现金流来源需要资本市场融资，即所谓“to VC”模式。一般to VC公司的归宿是上市，上市之后风险投资人原始股才更值钱，在上市之后在二级市场则是to 股票市场投资人（有的是散户和韭菜）的模式，去年就有很多互联网公司上市了。 盈利模式最终还是要回归到消费者或者客户，也就是说，主流的盈利模式就两个：要么是to C，要么是to B。 “服务模式”就是：为客户或者消费者提供的是什么东西才“值钱”。 有的是产品（比如小米手机），有的是内容（比如得到的课程），有的是预期保障（比如平安的保险），有的是技术解决方案（比如微盟为中小企业提供小程序一站式解决方案，科大讯飞为企业提供的智能语音识别系统等），有的是搭建一个销售平台（天猫为实体品牌搭建线上销售平台）等等，这些涉及到具体的业务执行层面，你会发现，接管这部分为公司赚到钱的职能部门，就叫做“市场部”。 商业模式之中最难窥门道，也是最难模仿的其实是“组织模式”，这一点很多人在提及商业模式的时候甚至没有想过，接下来要花一些篇幅来讲，尤其是互联网公司的“组织模式”。 我们知道，传统企业的组织模式往往是金字塔式的，通过分区域制来搭建自己销售网络和渠道，主要负责铺货和回款，但这种组织模式所付出的管理成本和沟通成本巨大。互联网本身是跨区域的、扁平的，这就给传统企业的组织方式带来了巨大的冲击和变革。 不妨以教育行业为例：传统教育机构是设立分校，但是很多机构在三线以下城市很难吸引大学生去做培训老师，就连好未来、新东方都没有办法下沉到三四线城市。 而互联网教育平台比如K12机构中的掌门1对1、阿卡索、DaDa等基本都能够做到，也压根没有所谓的“下沉市场”和“下沉用户”这一说法，其实那些谈到“下沉市场”其实是站在传统企业的组织模式上思考这个问题的。 现在的互联网公司一般是 “强总部轻支部” 的，实际上与传统企业组织模式恰好相反，过去那种各地的销售人员加起来远远大于总部人员的情况，在互联网公司是难以现象的。互联网公司总部会有很多技术人员，但是支部基本上可以由市场上共享或者外包合作来解决，也可以理解为，除总部之外无自养之兵，若需要都是雇佣兵形式。 当然，互联网化组织模式之中也有“异类”，比如：京东和美团快递员和配送员就超过了总部人员，甚至占到了80%，不过要注意到的是这两家公司均是亏损大户。与其说这是他们组织模式的特色，不如说这是他们迫不得已，因为更轻、更高效的组织模式已经有其他家早做了。我相信，这两家的“外包化”、无人配送的趋势最终将不可避免。 互联网的组织模式有时候也被称作是 “平台模式”，关于“平台”的概念在很多领域都极端含糊，完全只能凭借情景来理解。从低人力成本的维度上看，平台模式往往是通过搭建一个线上交易平台，让各方参与到其中，不为这些参与者发工资，以严格的社区契约取代公司员工的纪律约束，让参与其中的人“自组织”形成起来。 一般这些平台如果不是跑现金流的其盈利模式，最终会走广告的流量变现模式，而最有想象空间的还是交易平台，类似滴滴出行就是这种模式。 程维并没有给滴滴平台上的司机们交工资和社保，这些司机都是个体创业者，他们之所以愿意在滴滴上跑活，前提是滴滴上有客流量、有单子接，滴滴则是在每一单中抽服务佣金。 美团也是采用这种每单抽佣的形式作为盈利模式，但是最高交易频次的外卖业务必须依赖养配送员的传统组织模式。所以，滴滴就做网约车一个项目，就比美团做那么多品类估值高的原因在这里，可见组织模式先进程度直接决定了平台的毛利水平。 我们再来看，阿里巴巴也是这样平台组织模式，马云基本不需要雇佣快递员，也没有做仓储，甚至没有像小米那样按照电商逻辑去选品制造产品。他做其实是 “自组织” 的活，让大家在平台内获得利益分配并且活跃下去，就可以像滚雪球一样越做越大，剩下的苦累脏活基本由其他电商项目去做了，这也为什么京东与阿里之间的市值基本上差十倍以上，其差距不是在于流量和GMV上，而是在“组织模式”上。 由于是阿里巴巴跑的平台级现金流业务，尽管流量和投资广度比不上腾讯，但是在盈利模式能上略超过腾讯一点点。 二、商业模式中的“组织模式”为何重要性优于“服务模式”和“盈利模式”？ 从宏观维度上看，盈利模式无非是to C/to B/to VC/to 散户或韭菜/to G这五大类。 也就是说，是羊毛出在羊身上，或者是从商户那里抽成，再或者是通过提供平台的方式提供服务，甚至有可能压根就赚不到钱，卖的多还赔得多。但做流量规模之后上市即所谓的“战略亏损”烧死对手打下整个市场再做利润。 大道理大家都懂，但为什么好多项目就是做不来呢？项目跑通的核心是服务模式和组织模式要共同支撑起具体项目的“盈利模式”。 我们以知识经济为例：实际上互联网内容产品的服务效率相对于传统实物电商销售形式是更高的，没有任何商品库存压力，核心拼的是用户留存、复购和消课情况。 不过服务产品很容易同质化，这个老师讲的这个课程比较火，很快一堆老师去讲了，最终比拼如何让一个课程让更多学员买单。有的根据网红老师的影响力，有的则是采用各种返佣和裂变模式来做，但很快各种裂变手段刷爆朋友圈了也陷入疲软了，其实也印证了服务模式的壁垒，其实并不是很高的。 目前让我看到组织模式创新眼前一亮的项目是樊登读书会，其内容产品主要是由樊登输出课程为主，并以开讲嘉宾老师录音课程为辅。 樊登看到了只有实现付费用户的裂变，才能实现这些内容产品的“边际效益”，因而推广和营销至关重要。樊登读书的组织模式是典型的“重总部轻支部”模式，整个APP的运营、技术加起来是200人，而樊登读书的推广大使主要是由书友在各地举办的书友会，不用发工资、自组织、相当于“荣誉会员”。 现在很多人读书并不是以前找不到书看渴求知识，而是求氛围、派遣孤独和无聊，线下社群组织者无非是多送几年的VIP会员，总部无需过多成本，但樊登读书未来最值钱也许就是这个线下社群所构建的 “海星模式” 或者说 “阿米巴模式”。当读书会成员在线下社群、朋友圈自发成为推手时，也就解决流量获客瓶颈问题，非常值得初创企业学习的用户增长模式。 有很多项目商业模式从逻辑上讲非常完美，流量很大、规模效益很足，但是最终就是挂在服务模式和组织模式成本过高。 我们不妨复盘共享单车行业的兴衰，把共享单车模式的与滴滴的“平台”组织模式对比，就可以发现：共享单车所突出“共享”概念其实在商业模式上从来没有真正落地过，单车是摩拜和ofo等自己投钱造的并且负责投放的，车辆运维的成本也是运营方全包的，当然这些钱都是VC给的。 即使ofo曾经单日线上订单量超过滴滴，但是仅仅单车的维修成本就足以让投资人赔的血本无归；其唯一的希望就是垄断市场但是没有成功。摩拜甩给美团之后几乎是负资产，连品牌撤下刷成“美团单车”了，因为与其最终要承担维修费用，不如留在街头做实物广告。可以说，共享单车从一开始就在商业模式的平台化组织模式上缺乏设计和推动而埋下了败局的隐患。 不过现在网约车也本身没有什么搞头了，既然已经有这么强势“自组织”平台摆在那里，就像一个磁场一样会吸附周围各种资源，就很难再做出另一个自组织平台了，那种不发工资的平台要活跃起来其实比发工资更难。 目前构建这个领域的商业模式的最佳时机已经过去了，就像现在在做一个阿里巴巴的电商模式一样不现实。既然人家生态已经很成熟了，就无法再复制了。共享单车项目做网约车明知不可为而为之，希望能够用补贴把司机再凝聚起来。 但忽视了网约车政策壁垒是需要一个个城市落地都要牌照，网约车在商业模式是与出租车牌照业务是相互竞争的，地方政府不可能让那么多家网约车平台存在，所以大家基本上看到美团打车做了两年多了，一线城市牌照都没有拿全。 “组织模式”壁垒高产生了一个后果，那就是：轻平台模式的确比所谓的“重服务”模式更具竞争优势，做重模式实际上是被迫的。 这也就是几年前O2O在很多领域内都没有跑通的重要原因；而做重模式又需要很多钱，必须要让投资人买单，所以胜出的只有极少数幸运儿，不得不说，类似京东、美团这样的公司在资本市场“钱荒”时也是不可复制的。 当然有人可能会提出反驳，既然互联网公司在线下设渠道和自营服务人员比较重，那为什么小米、华为以及很多智能家电产品会在不同城市去开专门店呢？ 道理很简单，这些硬件产品的盈利模式是一分钱一分货，其成本除了生产成本、营销成本以外，还包括了售后成本，尤其是电视之类大件还需要安装，而做线下店能以手机存量用户的粘性来拓展更多周边电器产品的销售，提升复购，顺便cover的售后成本。 以上不难看出：在互联网平台的商业模式之中，反而是组织模式重要性是强于服务模式，服务模式是强于盈利模式的。 前两个环节的基础打得牢，反过来盈利模式是水到渠成，在人人追逐钱的社会，对于钱不感兴趣的马云成为了中国首富，反思阿里巴巴的服务模式和组织模式在中国企业之中是不是最好的？就不奇怪了。 三、如何看待互联网平台商业模式之中的“平台税”？上述商业模式的阐述，有心的朋友就会发现：互联网公司对于商业模式最大的贡献其实是 “平台化” 组织模式，它最能够释放了互联网 指数型增长 和流量红利优势。 互联网最开始诞生的时候更多是在信息传播领域的“共享”，越往后发展越是资源、技术的共享，共享的前提是“让利”。 已经在越来越多的行业内可以清晰的看出，做成NO.1基本是“平台模式” 了。因为这种组织模式变革，可以调动所在行业指数级增长，而过去那种完全依赖自身品牌单打独斗的项目即使做得市场第一也是线性式增长，其市值也远远不及互联网公司高。 不过互联网公司做平台总得盈利，关于其盈利模式，“靠谱的阿星”发明了一个词——“平台税”，基本能够概括目前绝大部分平台的收入来源。 接下来，我们以一些知名的互联网平台进行举例说明： 在电商平台领域，阿里巴巴2019年整个财年收入3768.44亿元，净利润876亿元，市值4500多亿美金，是中国互联网公司中最赚钱的也是市值最高的公司。 阿里云的盈利模式基本上是to B，也就是从商户或者企业那里收钱，除了云计算业务以外，还包括其核心业务（电商业务）。 据知情人士表示：台抽佣为例，商户在淘宝是免交易抽金，但由于淘宝商城内每一个SKU中都有很多商家的产品，商户需在平台内买流量位（直通车或者钻展），这就构成了淘宝的收入；而天猫商城当然也有相关商家的流量收入，同时还有抽交易佣金以及技术服务费。阿里巴巴是一个大数据公司。 在O2O服务平台领域，以美团为例其交易佣金根据市场竞争状态在浮动，其中2019年Q1是13.87%，也就是此时用户说买一单100元外卖，美团提走13.87元。不过商家一般也会算，外卖价格定得比堂食贵就行了。 美团业务线比较多，不同的品类的佣金应该有不同。滴滴平台上的交易佣金也是每单都提，我是滴滴的深度用户，经常坐在副驾上跟司机聊，有的说抽20%，有的说抽25%，一般还根据交通情况进行来调节佣金调动司机。 在内容平台领域，以快手为例：很多网红主要收入来源就是开直播让用户送礼物打赏，快手平台与用户之间是五五分成，快手实际上是目前最大的直播平台；去年4月份当时抖音还没有上线直播功能的时候，“靠谱的阿星”写的一篇文章里说“无论是按照五五开、四六开还是三七开算，抖音肯定是不过错过做直播模式的”，现在抖音直播按照三七开算的，达人提30%的打赏收入。 再举一个例子：有很多自媒体大V入驻得到开课，得到就成了平台，对专栏买卖收入也是每一单会抽佣的。 一般平台越是成功，其抽佣也就越强势，网上也有一些人对“平台税”不满，其实这种“税是喂养平台的娘奶”。 一方面平台搭建了基础设施，就像过高速收费一样；另一方面是平台运行需要支付的带宽费、服务器费用、CDN网速加速等都是成本。 再加上，很多人在平台之所以能够成交是由于平台派单或是导流，而平台为了获取和留存这个用户本身也是花了一定的费用的。所以，平台抽佣无可厚非，这乃是平台与其参与者之间的游戏规则。 目前，电商平台的模式有很多，比如：C2C、B2C、B2b2C等等。严格来说均有“平台税”则是表现形式不同而已，也有的人把电商模式单独归结为一种与“游戏”、“广告”相区分的商业模式。“游戏模式”自从手游普及之后大家都明白了是怎么回事。 在上述三种主流互联网商业模式之中，电商模式对商业模式贡献最大，电商无论发展无论是网红电商、服务电商、团购、拼购等核心还是平台如何平衡用户端与商户端之间的关系。这两年电商模式又开始演变以大数据为渠道的C2M和新零售；还有以SaaS平台为无数个供应商作为小b提供线上平台，再由他们各自服务自己的用户的 S2b2c模式。 而S2b2c模式已经超出电商范畴，平台即S搭建了一个技术型基础设施，而小b入驻于平台中购买软件和系统的商户，这些商户之间又是去中心化的，单独与平台之间是相互协作的关系。 他们可以通过S提供工具去服务各自的用户，构建起自身的私域流量。由于一次采买的平台提供系统服务，不需要再和平台进行交易分佣而开始大行其道。实际上，目前微盟、小鹅通、房多多等都是采用这种模式来做to b端的技术解决方案。个人认为，S2b2c模式结合了平台化的组织模式优势，又减少了“平台税”的摩擦，应是未来商业模式的趋势之一。 我们再看看整个移动互联网流量最大的互联网公司腾讯，除了游戏模式以外，腾讯由于掌握了流量最重要的筹码而成为国内针对互联网行业的最大的投资机构。 微信是腾讯最大的流量平台，微信这个产品之所以能够成为移动互联网国民级应用和最普惠基础设施，原因在于 微信本身没有商业模式。所以，张小龙才说“微信一个工具，而不是一个平台”，很多微商以及部分借私域流量名义做微商的行为，实际上就是利用了微信本身不收“平台税”的特点，本身也可以理解为是在“逃平台税”。 2018年之后腾讯开启拥抱产业互联网，实际上腾讯是想做一个结合了各行各业类似S2b2c中平台赋能者的角色，除了作为自身to B领域的盈利方向外，还在为AI（人工智能）获取更多行业商业智能做前期准备。 结语每一个商业模式的梳理和研究，都需要对应的案例作为支撑，只有充分消化这些案例，才能总结出里头的商业模式。 学习商业模式最快的途径就是把自己作为一个神秘的顾客去体验一遍，消费一遍再结合产品、商业计划书以及上网一些通稿去理解。 一般商业模式不会成为PR的重点，除非是这个项目还处于起步阶段，需要更多投资人和行业人士理解才会做商业模式上的传播。 类似腾讯公关不会PR游戏收入，阿里公关也不会提收了多少佣金或者营销收入，比如：百度、头条他们对其广告销售体系的组织模式也不会向外公开，有时候只有等公司上市了之后才能看到一些数字，但对于不了解其商业模式的人来说，这些数字背后意义也没有多少人真正在意。 现在商业模式越来越务实，比如一些to C模式的平台可能从一开始就鼓励用户买VIP，先付钱再做服务，保证现金流之后再砸服务效果；在组织模式上未来平台会鼓励更多人在平台上创业而非打工，平台更少的人力成本而参与者更多的自由时间，两全其美。 商业模式是一个项目精髓所在，在一家公司比较小的时候能看得很清楚，甚至能根据商业模式作为做出预判，当这家做大了之后，就很难再看清楚他们的商业模式，大家也可以选择在一些优秀创业公司很小的时候一直关注甚至选择陪伴他们成长，体会会更加深刻。 本文收藏转自 李星（公众号“靠谱的阿星”，靠谱汇创始人，哲学硕士，科技媒体专栏作者）—— 人人都是产品经理 阅读原文]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>商业模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乒乓圈 [原创]]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F16%2FTTcircle%2F</url>
    <content type="text"><![CDATA[银跃乒乓圈小程序 - 项目介绍文档旅梦开发团-发烧圈团队 1 项目背景&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;马克·罗在问与答网站上写道，“在中国有一个笑话，永远都不要说你擅长打乒乓球，因为你不知道你的朋友里是否有从省队退役下来的。”总所周知，乒乓球是国球，但在这互联网时代，市面上与乒乓球相关的线上可用产品却不过数几，大多也都只是涉及器材贩卖和乒乓培训方面，对于乒乓球兴趣的平台服务基本空白，这也就促使我们乒乓球爱好者对其产生兴趣，致力研究，打造一个专门关于乒乓球兴趣的大众自主服务平台。 2 项目简介&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;银球跃动，挥拍击扬，乒乒乓乓，兴趣所在。这是我们对打乒乓球的现实描述，大家都是通过同一兴趣走到一起，互相认识，互相切磋，以球会友。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;银跃乒乓圈以平台为思想，致力于打造乒乓球兴趣圈的自主服务，可以共享球馆，查询场地，一键约球，查看快讯，参与比赛，留言互动，以线下球友，线上圈友的形式，使用户在小程序内资源共享、双向交互，达到平台自主服务。 3 名词解释 序号 名词 描述 1 自主服务 我们打造的服务平台，搭建服务框架，用户之间的双向交互形成自主服务（例如，共享球馆—发布球馆，上传球馆信息；一键约球—用户线上匹配交流，线下约球等） 2 球圈 一个球馆代表着一个球圈 3 圈友 银跃乒乓圈用户统称圈友 4 乒乓段位 通过打卡，开快讯参与比赛等获得积分，累计积分越高段位越高，权限增加 5 同城圈 可查找同城已共享的球馆，查看球馆相关活动人员，共享发布球馆，一键约球 6 达人圈 段位积分升至达人的用户或者特邀用户可在达人圈进行优秀图文的发布 7 赛事圈 可查询并参与比赛，段位积分升至达人的用户或者特邀用户可发起比赛 8 快讯圈 可浏览收藏乒乓球相关的新闻快讯 4 可行性分析4.1 项目可行性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;据国际乒联的数据，2018年中国有41.9%的人口都在电视上观看了乒乓球比赛。全年中，有5.39亿的观众专注于观看乒乓球，中国有1000万人经常参加乒乓球比赛，3亿人会打乒乓球。刘国梁曾发博给出数据，全国专业选手2000人+业余体校30000人，全国参与乒乓球一周两次以上，一次一小时以上的有8300多万人。现在各个地区也都发展起来各种乒乓球馆、球室、俱乐部，基本每个公园、小区、公司、学校等也都装备了乒乓球设施，可见乒乓球体育运动项目的人员基数庞大，硬件环境成熟可观。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在每一个地方都有乒乓圈，圈内人互称球友。乒乓圈小至县乡有一两个圈子，大至市、区有十多个甚至更多具有一定规模的圈子，加之各个高校有其圈子，小区有其圈子，甚至街道也有其街道圈，各个圈子相互交织，错综复杂。那么这个小程序的作用关键就在于对各个乒乓球圈的整合，球馆资源共享，让球友们交流起来更方便、更广泛，这无疑是给一些乒乓萌新爱好者带来了福音，也给一些足具规模的圈子有了更广阔的发展渠径。因此本项目开展的可行性非常高。 4.2 技术可行性（1）使用colorUI组件库，加强视觉交互，提高用户体验；（2）使用VUE组件化编程思想，提高代码的复用性；（3）JS处理各种业务逻辑，通过向后端接口请求数据或者对数据进行格式化，用函数式编程风格，对各个业务逻辑进行功能划分，编写基础业务方法，工具类方法进行抽离，独立成一个工具函数模块，利于代码规范统一；（4）整体布局与样式严格遵守微信UI规范微信官方提供多种API及组件工具，极大地加快开发效率，标签命名遵守BEM(Block Element Modifier)；（5）云开发：弱化后端及运维的概念，无需搭建服务器，降低开发成本，使用微信平台提供的api即可完成核心的业务开发，方便快捷：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.云函数：在云端运行的代码，微信私有协议天然鉴权，开发者只需编写自身业务逻辑代码；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.数据库：既可在小程序前端操作，也能在云函数中读写的 JSON 数据库，免费2G容；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C.存储：可在小程序前端上传/下载云端文件，在云开发控制台可视化管理，免费5G容量。 5 功能详述5.1 功能需求5.1.1模块1—tarbar首页5.1.1.1 设计及功能描述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首页是最重要的模块，也是用户登录进来看到的第一个模块，所以首先在界面设计上花费了许多心思，起初的设计以圈的思想规划了几个圈，上面以常见的轮播图形式展示新闻如图5-1，进一步设计中，将圈形象化以乒乓球的形式展示出，背景以乒乓球桌的形式展示，让乒乓球爱好者感受到小程序风格的贴切如图5-2，但是在实际代码实现过程中，发现展示效果并不如原型图那么理想，轮播图以爬虫技术获取的中国乒协官网的新闻有些图片展示也并不美观，影响的首页的整体效果，于是又把快讯单独拉出来放了一个版块，和同城圈一样把快讯以圈的形式展示，加之整个背景使人感觉深沉，于是通过大量素材的查找和配色下，在原来蓝色的基调下使主体颜色浅化，处于紫色和蓝色之间的青紫色状态展出，最终确定了整个小程序独特的的主题风格如图5-3，但是图三的圈体现不出小程序的主打功能，于是我们将同城圈单独划出为一个大版块展出，其余三个 置下做出轮播的用户交互效果，实现图5-4的首页效果。以下是我们原型设计的成型过程： 图5-1 原型1&nbsp;&nbsp;图5-2 原型2&nbsp;&nbsp;图5-3 原型3&nbsp;&nbsp;图5-4 原型4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由图容易看出：本产品首页的功能板块主要有：同城圈，达人圈，赛事圈，快讯圈，附带榜单和打卡签到功能，基本涵盖了乒乓球体育运动项目的方方面面，致力于全方位平台服务。 5.1.1.2 功能点 序号 功能名称 所属版块 功能简介 状态 优先级 1 共享球馆 同城圈 发布球馆表单，上传球馆信息 已完成 P0 2 一键约球 同城圈 用户之间的匹配约球交互 待开发 P0 3 城区选择 同城圈 可选择查看其他城区的球馆 待开发 P1 4 加入球圈 同城圈 加入球馆的活动成为圈内人 待完善 P1 5 参加比赛 赛事圈 可以参加已发起的赛事 待开发 P2 6 发起比赛 赛事圈 达到权限可发起比赛 待开发 P2 7 浏览快讯 快讯圈 关于乒乓球的新闻快讯 待完善 P3 8 精品收藏 快讯圈 收藏自己值得珍藏的快讯 待开发 P3 9 发表图文 达人圈 达人发表乒乓球优秀图文 待开发 P4 10 榜单 首页 查看同城积分排行榜 已完成 P5 11 签到 首页 签到增加相应积分积分 已完成 P5 12 提示 首页 乒乓球全局通告 已完成 P6 5.1.1.3 页面布局首页页面1&nbsp;&nbsp;首页页面2&nbsp;&nbsp;首页页面3首页页面4&nbsp;&nbsp;首页页面5&nbsp;&nbsp;首页页面6 5.1.2 模块2—tarbar圈友5.1.2.1 设计及功能描述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此模块维系首页主题色调，银跃式简约阳光风格，背景用CSS制作气泡，象征着一个又一个大小不一的圈，也代表着积极运动阳光向上的理念。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此模块分为两个版块：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）显示自己已加入的球圈列表及其相关活动人员列表；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）显示圈友给自己的留言消息。 5.1.2.2 功能点 序号 功能名称 所属模块 功能简介 状态 优先级 1 球圈列表 圈友 列出所有已加入的球圈 已完成 P0 2 圈友信息 全局 列出求圈内圈友及其信息 已完成 P0 3 圈友留言 圈友 给圈友留言 已完成 P0 5.1.2.3 页面布局圈友页面1&nbsp;&nbsp;圈友页面2 5.1.3 模块3—tarbar我的5.1.3.1 设计及功能描述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;乒乓圈小程序的个人仓库，对自己的信息做修改完善的模块。 5.1.3.2 功能点 序号 功能名称 所属模块 功能简介 状态 优先级 1 个人资料 我的 对个人资料的修改 已完成 P0 2 乒乓段位 我的 段位机制查看5.1.4 已完成 P1 3 我的积分 我的 积分机制擦查看5.1.4 已完成 P1 4 精选收藏 我的 快讯收藏的仓库 待开发 P2 5 我的赛事 我的 查看自己已参加的赛事 待开发 P2 6 意见反馈 我的 用户对乒乓圈小程序的反馈 待开发 P3 7 关于我们 我的 关于乒乓圈的简单介绍 待完善 P4 5.1.3.3 页面布局我的页面1&nbsp;&nbsp;我的页面2&nbsp;&nbsp;我的页面3 5.1.4 机制规则乒乓圈段位积分及其权限设置机制：（1）同城榜单按照段位积分排名，段位：新手1—10段，业余1—10段，达人1—10段；积分无上限，按积分排名（2）产品用户：特邀用户+普通体验/游客/用户（3）积分累计规则：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.打卡第1日 — 1分,连续打卡2日 — 2分,连续打卡3日 — 3分,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;连续打卡4日 — 4分,连续打卡5日 — 5分,连续打卡6日 — 6分,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;连续打卡7日 — 8分,连续打卡7日+ — 10分,如果其中有一天&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有打卡就会清零,并重新开始计算 从2分开始。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.阅览新闻快讯+1积分，一天加分3次上限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C.同城一键约球+1积分，一天加分3次上限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D.加入一个球圈+1积分，一天加分1次上限（4）段位机制：A.初始：新人B.新手段位：新手1段(30积分)，新手2段(60积分)，新手3段(90积分)，新手4段(120积分)，新手5段(150积分)，新手6段(180积分)，新手7段(210积分)，新手8段(240积分)，新手9段(270积分)，新手10段(300积分)C.业余段位：业余1段(400积分)，业余2段(600积分)，业余3段(800积分)业余4段(1000积分)，业余5段(1200积分)，业余6段(1400积分)业余7段(1600积分)，业余8段(1800积分)，业余9段(2000积分)业余10段(2200积分)D.达人段位：达人1段：新晋达人(2500积分)，达人2段：达人1星(2800积分)达人3段：达人2星(3100积分)，达人4段：达人3星(3400积分)达人5段：达人4星(3700积分)，达人6段：达人5星(4000积分)达人7段：优秀达人(4500积分)，达人8段：魅力达人(5000积分)达人9段：口碑达人(6000积分)，达人10段：专业达人(8000积分)（5）段位权限：A.新手：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.打卡、查看榜单&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.阅览新闻快讯&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.同城圈一键约球&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.申请加圈&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.查看达人圈，点赞评论收藏关注&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.赛事圈参加赛事(功能上线后)B.业余：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.拥有新手所有功能权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.发起球圈C.达人：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.拥有新手业余所有功能权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.达人圈进行发文&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.赛事圈发起赛事(功能上线后)（6）掉分掉段设置：两周不登录，降200分，以此类推直至为0 6 设计未完待续，更需完善。。。 附上团队大佬为本项目发表的掘金优文 —— 微信小程序–乒乓圈 - 云开发]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[笔波文]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F15%2Fpoem-wenbo%2F</url>
    <content type="text"><![CDATA[亦凄亦美 寒夜遥望隔岸灯火 此情此景 指尖轻点千丈落水 非敌非友 孤鸟长鸣下掸心愿 愿生愿死 痴情相守泪散千年 文波亲笔]]></content>
      <categories>
        <category>诗集</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[亲献]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F14%2Fpoem-love%2F</url>
    <content type="text"><![CDATA[输入密码 ❤ 查看文章 Incorrect Password! No content to display! U2FsdGVkX1+hurW5tRrwyv2DXWZymGQZ/ew3o0itBqCPwVPioWJGfhKTsqG3mO8ZkkqLbfVko2d7CRiX+ushawgOjkWGMp1F0cQWRBvIYL1eiqETXvRkA2ggXfxC3NKN72AiEwggTboKBtZ/ls5kLRDpTD1Mu2VDpyOOsIaw9TAj8e5tcsPnmXChujm1IpQYzKwCAB2xJhyYYZBdKdXojVD4W/tDL/DLFdOfMeE8/yiuLJS68+zmes5vLPEwT1lSTMaxaZ/UiqHqjUpwvGVp/v+YspxZfCRmJ92ZBDqAdPyQ6rk3/8TsIExDjttzk2+ZtgYLPsQn/h8n7d9Q5JWYN3p4y+eZ48pt9NOl1yIupwC7wpSFfBraxgUs3fT7P4X279vVnQ5Wr/texZhH9+zlZNRrGIw/RkBCd2arIXMJyBnSVTOZ5rv079T2w/QH0LcF5G8pMiEFDpuyQ0w4AVQ7cUpvZ14nUrpTpEB+m/50d+JBE8Tem5l5NKXLLoervfR+4VHjb/fGd6mO/VapgZ6TluPhiZUrz++mAH0n3zAXM8Dh5scDHJJDQONbWxeYuRyNd4VVvpoVQQb/v0oPLDnLJBDycxy5sUcRWFVsxEqlr4xA72MDxnJgnOd/KK66IQx6PFjFsbEdRV/CRnl6cOendDzv9R7dTP9tiikr9KpkgzxfnEL/SqkQhpZW/fjEJlbUCCvvgQMRgXlhpqSDLkC8LQT3XtFwlCRkvZms/bgaK1Yj8W2julKKuOtTPhk/eu7expSHN5ihowRCkqVVr4FuqVfA65RTAi6cEhMNOlcwOXFtRELiasK6BLUVWU4Cd1J9PN3/HpyuD7MnQ/PP74bu6tYwQxxYYoX+BDmUjvSRn7kOxRnzAXT54hrSlskLv/kyqW3/X1DHH7ZXcBv0rXT8/33WzU1ajL3Am5GLkhM3gPaAXnJCNqHWd0kv3SRLzSvims2RuUq4guAG3cWdo1uiBvjrr9YWMEU+1FYfYkH5IDKABCahtTl2OA/qVJEx7Y5BlE0x/wQkemUC7GIj7Q07xqVxwK6/rCrGRq6q2JzdESt5+BtJHpLVwLhFzFx1I6YdwiKY29dMF0l2Y2rbuYWfGFdnTl996Bw7ecBTFnxiANNdB3wsRGsSxJ6QCxk1TbMKEjsDUEJYYBIusZtuUK8KWHB0TsCa7/sAqvp1UyisTF0NsG8FbBqKVtS3wKL6XJ7Zt7+gFmfwVtv2aiCubbwaD26AuSEIHc5k41Jxcw/ffz9PSXEpOGveqHNC8hNebDbQRavHCh779KDfW+pYiTZi8YutbqoXjBfg4tIpkaGmwA4yvzEVHN09UkSsA0J44gj+bJsgPS2vRRTxVRc3mdEeZdxUIEPtdtKnYGz0Fugq4X/uLOwFM/0KNUTaQd5cN5myfsABruFyzy7UKclzbWsEaMX0VeiMb2/yO2ycUmpnEc4nLJM3qpb8p4U2irpYTniAx5zuKC9WVfeusuaTOT6ugWOK1oUBZwFCZQfA7g86PObCnseEg09yFdgZ1rOCx2rIIkFY2RCXqYvJ2o9gb3y+bd950H1YFCnqhx3hrXsearFtlJTmbPdprUDK7VTb1k8EOsiTq+lyXKMLwOUV00Ukwg==]]></content>
      <categories>
        <category>诗集</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[友情链接]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F13%2Ffriends%2F</url>
    <content type="text"><![CDATA[旅梦开发团自频道 叶志祥老师 - 慕楚教育 技术胖 阮一峰 张鑫旭 司徒正美 小猿大圣 Phodal 酷壳 36氪 人人都是产品经理 UI：uigradients、trianglify.io 工具类：xiaopiu.com]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于转载]]></title>
    <url>%2FJietingHuang.github.io%2F2019%2F08%2F13%2Fcopyright%2F</url>
    <content type="text"><![CDATA[首先感谢hexo以及Yearn主题作者hufangyun小猿大圣让我迅速搭建起自己喜欢的个人博客，以此认真记录下自己的学习旅程，希望以后我能在自己的学习道路上越走越远，如我在首页所说：“路漫漫其修远兮，吾将上下而求索 —— 学而无止境。” 刚建立博客，虽然还未发表什么有价值性的文章，但我始终尊重和支持原创，也同是为了促进自己的学习，若有转载或摘文，必定注明出处。所以也希望走过路过的朋友看到此文也能这么做，创建文明共享网络。]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
